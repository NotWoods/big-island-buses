{"version":3,"file":"service-worker.js","sources":["../src/service-worker.ts"],"sourcesContent":["const CACHE = 'network-or-cache';\n\nexport declare var self: ServiceWorkerGlobalScope;\n\nself.addEventListener('install', evt => {\n  evt.waitUntil(precache());\n});\n\nself.addEventListener('fetch', evt => {\n  const url = new URL(evt.request.url);\n  if (url.host === location.host) {\n    if (url.pathname.includes('/routes/')) {\n      // Route pages have same layout as main page\n      evt.respondWith(\n        fromNetwork(evt.request, 400).catch(() => fromCache('index.html')),\n      );\n    } else {\n      // Network then fallback\n      evt.respondWith(\n        fromNetwork(evt.request, 400).then(\n          response => {\n            // Update cache after network success\n            evt.waitUntil(putInCache(evt.request, response));\n            return response;\n          },\n          () => fromCache(evt.request),\n        ),\n      );\n    }\n  } else {\n    // External scripts (Google Maps) aren't cached\n    evt.respondWith(fetch(evt.request));\n  }\n});\n\nfunction precache() {\n  return caches\n    .open(CACHE)\n    .then(cache =>\n      cache.addAll([\n        './',\n        'index.html',\n        'style.css',\n        'main.js',\n        'api.json',\n        'assets/logo.svg',\n        'assets/lines.svg',\n        'assets/tigeroakes.svg',\n        'icon/favicon.ico',\n        'icon/maskable.png',\n        'icon/transparent.png',\n      ]),\n    );\n}\n\nfunction fromNetwork(request: RequestInfo, timeout: number) {\n  return new Promise<Response>((fulfill, reject) => {\n    const timeoutId = setTimeout(reject, timeout);\n    fetch(request).then(response => {\n      clearTimeout(timeoutId);\n      fulfill(response);\n    }, reject);\n  });\n}\n\nfunction fromCache(request: RequestInfo) {\n  return caches\n    .open(CACHE)\n    .then(cache => cache.match(request))\n    .then(matching => {\n      if (matching) {\n        return matching;\n      } else {\n        throw new Error(`${request} not cached`);\n      }\n    });\n}\n\nfunction putInCache(request: RequestInfo, response: Response) {\n  return caches.open(CACHE).then(cache => {\n    return cache.put(request, response);\n  });\n}\n"],"names":["CACHE","fromNetwork","request","timeout","Promise","fulfill","reject","timeoutId","setTimeout","fetch","then","response","clearTimeout","fromCache","caches","open","cache","match","matching","Error","self","addEventListener","evt","waitUntil","addAll","url","URL","host","location","pathname","includes","respondWith","catch","put","putInCache"],"mappings":"AAAA,MAAMA,EAAQ,mBAuDd,SAASC,EAAYC,EAAsBC,GACzC,OAAO,IAAIC,QAAkB,CAACC,EAASC,KACrC,MAAMC,EAAYC,WAAWF,EAAQH,GACrCM,MAAMP,GAASQ,KAAKC,IAClBC,aAAaL,GACbF,EAAQM,IACPL,KAIP,SAASO,EAAUX,GACjB,OAAOY,OACJC,KAAKf,GACLU,KAAKM,GAASA,EAAMC,MAAMf,IAC1BQ,KAAKQ,IACJ,GAAIA,EACF,OAAOA,EAEP,MAAM,IAAIC,SAASjB,kBArE3BkB,KAAKC,iBAAiB,UAAWC,IAC/BA,EAAIC,UA+BGT,OACJC,KAAKf,GACLU,KAAKM,GACJA,EAAMQ,OAAO,CACX,KACA,aACA,YACA,UACA,WACA,kBACA,mBACA,wBACA,mBACA,oBACA,6BA1CRJ,KAAKC,iBAAiB,QAASC,IAC7B,MAAMG,EAAM,IAAIC,IAAIJ,EAAIpB,QAAQuB,KAC5BA,EAAIE,OAASC,SAASD,KACpBF,EAAII,SAASC,SAAS,YAExBR,EAAIS,YACF9B,EAAYqB,EAAIpB,QAAS,KAAK8B,MAAM,IAAMnB,EAAU,gBAItDS,EAAIS,YACF9B,EAAYqB,EAAIpB,QAAS,KAAKQ,KAC5BC,IAEEW,EAAIC,UAwDhB,SAAoBrB,EAAsBS,GACxC,OAAOG,OAAOC,KAAKf,GAAOU,KAAKM,GACtBA,EAAMiB,IAAI/B,EAASS,IA1DJuB,CAAWZ,EAAIpB,QAASS,IAC/BA,GAET,IAAME,EAAUS,EAAIpB,WAM1BoB,EAAIS,YAAYtB,MAAMa,EAAIpB"}