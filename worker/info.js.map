{"version":3,"file":"info.js","sources":["../../src/shared/utils/num.js","../../src/shared/utils/date.js","../../src/worker/register.js","../../node_modules/spherical-geometry-js/src/utils.js","../../node_modules/spherical-geometry-js/src/latlng.js","../../node_modules/spherical-geometry-js/src/compute-distance-between.js","../../src/worker/info/closest-stop-worker.js","../../src/worker/info/route-details-worker.js","../../src/worker/info/index.js"],"sourcesContent":["export const toInt = (n) => Number.parseInt(n, 10);\n//# sourceMappingURL=num.js.map","import { toInt } from './num.js';\n/**\n * Returns a special `Date` without an associated year or month.\n *\n * Used throughout the application to represent times with no dates attached.\n * This roughly equates to `Temporal.PlainTime` with space for overflow.\n */\nexport function plainTime(hours, minutes, seconds) {\n    let days = 0;\n    if (hours >= 24) {\n        days = Math.floor(hours / 24);\n        hours = hours % 24;\n    }\n    return new Date(0, 0, days, hours, minutes, seconds, 0);\n}\n/**\n * Turns a date into a string with hours, minutes.\n * @param  {Date} \tdate Date to convert\n * @param  {string} date 24hr string in format 12:00:00 to convert to string in 12hr format\n * @return {string}    \tString representation of time\n */\nexport function stringTime(date) {\n    if (typeof date === 'string') {\n        if (date.indexOf(':') > -1 && date.lastIndexOf(':') > date.indexOf(':')) {\n            const [hour, min, second] = date.split(':').map(toInt);\n            date = plainTime(hour, min, second);\n        }\n    }\n    if (typeof date != 'object') {\n        throw new TypeError(`date must be Date or string, not ${typeof date}`);\n    }\n    let m = 'AM';\n    let displayHour = '';\n    const hr = date.getHours();\n    const min = date.getMinutes();\n    if (hr === 0) {\n        displayHour = '12';\n    }\n    else if (hr === 12) {\n        displayHour = '12';\n        m = 'PM';\n    }\n    else if (hr > 12) {\n        const mathHr = hr - 12;\n        displayHour = mathHr.toString();\n        m = 'PM';\n    }\n    else {\n        displayHour = hr.toString();\n    }\n    const displayMinute = `:${min.toString().padStart(2, '0')}`;\n    return displayHour + displayMinute + m;\n}\n/**\n * Returns a date object based on the string given\n * @param  {string} string in format 13:00:00, from gtfs data\n * @return {Date}\n */\nexport function gtfsArrivalToDate(string) {\n    const [hour, min, second] = string.split(':').map((s) => toInt(s));\n    return plainTime(hour, min, second);\n}\n/**\n * Combines stringTime() and gtfsArrivalToDate()\n * @param  {string} string in format 13:00:00, from gtfs data\n * @return {string}        String representation of time\n */\nexport function gtfsArrivalToString(string) {\n    return stringTime(gtfsArrivalToDate(string));\n}\n/**\n * Returns the current time, with date stripped out\n * @return {Date} Current time in hour, min, seconds; other params set to 0\n */\nexport function nowPlainTime() {\n    const now = new Date();\n    return plainTime(now.getHours(), now.getMinutes(), now.getSeconds());\n}\n//# sourceMappingURL=date.js.map","export function registerPromiseWorker(callback) {\n    function postOutgoingMessage(messageId, error, result) {\n        if (error) {\n            console.error('Worker caught an error:', error);\n            self.postMessage([messageId, error]);\n        }\n        else {\n            self.postMessage([messageId, null, result]);\n        }\n    }\n    self.onmessage = function onIncomingMessage(e) {\n        const payload = e.data;\n        if (!Array.isArray(payload) || payload.length !== 2) {\n            // message doens't match communication format; ignore\n            return;\n        }\n        const [messageId, message] = payload;\n        Promise.resolve(callback(message)).then((result) => postOutgoingMessage(messageId, null, result), (error) => postOutgoingMessage(messageId, error));\n    };\n}\n//# sourceMappingURL=register.js.map","/** @type {number} Earth's radius (at the Equator) of 6378137 meters. */\nexport const EARTH_RADIUS = 6378137;\n\nexport function toDegrees(radians) {\n    return (radians * 180) / Math.PI;\n}\n\nexport function toRadians(angleDegrees) {\n    return (angleDegrees * Math.PI) / 180.0;\n}\n","const LAT = 'latitude';\nconst LNG = 'longitude';\n\n/**\n * Converts an object into a LatLng. Tries a few different methods:\n * 1. If instanceof LatLng, clone and return the object\n * 2. If it has 'lat' and 'lng' properties...\n *    2a. if the properties are functions (like Google LatLngs),\n *        use the lat() and lng() values as lat and lng\n *    2b. otherwise get lat and lng, parse them as floats and try them\n * 3. If it has 'lat' and *'long'* properties,\n *    parse them as floats and return a LatLng\n * 4. If it has 'lat' and *'lon'* properties,\n *    parse them as floats and return a LatLng\n * 5. If it has 'latitude' and 'longitude' properties,\n *    parse them as floats and return a LatLng\n * 6. If it has number values for 0 and 1, use 1 as latitude and 0\n *    as longitude.\n * 7. If it has x and y properties, try using y as latitude and x and\n *    longitude.\n * @param {any} like\n * @returns {LatLng}\n */\nexport function convert(like) {\n    if (like instanceof LatLng) {\n        return new LatLng(like[LAT], like[LNG]);\n    } else if ('lat' in like && 'lng' in like) {\n        if (typeof like.lat == 'function' && typeof like.lng == 'function') {\n            return new LatLng(like.lat(), like.lng());\n        } else {\n            return new LatLng(parseFloat(like.lat), parseFloat(like.lng));\n        }\n    } else if ('lat' in like && 'long' in like) {\n        return new LatLng(parseFloat(like.lat), parseFloat(like.long));\n    } else if ('lat' in like && 'lon' in like) {\n        return new LatLng(parseFloat(like.lat), parseFloat(like.lon));\n    } else if ('latitude' in like && 'longitude' in like) {\n        return new LatLng(\n            parseFloat(like.latitude),\n            parseFloat(like.longitude)\n        );\n    } else if (typeof like[0] === 'number' && typeof like[1] === 'number') {\n        return new LatLng(like[1], like[0]);\n    } else if ('x' in like && 'y' in like) {\n        return new LatLng(parseFloat(like.y), parseFloat(like.x));\n    } else {\n        throw new TypeError(`Cannot convert ${like} to LatLng`);\n    }\n}\n\n/**\n * Comparison function\n * @param {LatLng} one\n * @param {LatLng} two\n * @returns {boolean}\n */\nexport function equals(one, two) {\n    one = convert(one);\n    two = convert(two);\n    return (\n        Math.abs(one[LAT] - two[LAT]) < Number.EPSILON &&\n        Math.abs(one[LNG] - two[LNG]) < Number.EPSILON\n    );\n}\n\nexport default class LatLng {\n    /**\n     * @param {number} lat\n     * @param {number} lng\n     * @param {boolean} noWrap\n     */\n    constructor(lat, lng, noWrap = false) {\n        lat = parseFloat(lat);\n        lng = parseFloat(lng);\n\n        if (Number.isNaN(lat) || Number.isNaN(lng)) {\n            throw TypeError('lat or lng are not numbers');\n        }\n\n        if (!noWrap) {\n            //Constrain lat to -90, 90\n            lat = Math.min(Math.max(lat, -90), 90);\n            //Wrap lng using modulo\n            lng = lng == 180 ? lng : ((((lng + 180) % 360) + 360) % 360) - 180;\n        }\n\n        Object.defineProperty(this, LAT, { value: lat });\n        Object.defineProperty(this, LNG, { value: lng });\n        this.length = 2;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * Comparison function\n     * @param {LatLng} other\n     * @returns {boolean}\n     */\n    equals(other) {\n        return equals(this, other);\n    }\n\n    /**\n     * Returns the latitude in degrees.\n     * (I'd rather use getters but this is for consistency)\n     * @returns {number}\n     */\n    lat() {\n        return this[LAT];\n    }\n\n    /**\n     * Returns the longitude in degrees.\n     * (I'd rather use getters but this is for consistency)\n     * @returns {number}\n     */\n    lng() {\n        return this[LNG];\n    }\n\n    /** @type {number} alias for lng */\n    get x() {\n        return this[LNG];\n    }\n    /** @type {number} alias for lat */\n    get y() {\n        return this[LAT];\n    }\n    /** @type {number} alias for lng */\n    get 0() {\n        return this[LNG];\n    }\n    /** @type {number} alias for lat */\n    get 1() {\n        return this[LAT];\n    }\n    /** @type {number} alias for lng */\n    get long() {\n        return this[LNG];\n    }\n    /** @type {number} alias for lng */\n    get lon() {\n        return this[LNG];\n    }\n\n    /**\n     * Converts to JSON representation. This function is intended to be used via\n     * JSON.stringify.\n     * @returns {LatLngLiteral}\n     */\n    toJSON() {\n        return { lat: this[LAT], lng: this[LNG] };\n    }\n\n    /**\n     * Converts to string representation.\n     * @returns {string}\n     */\n    toString() {\n        return `(${this[LAT]}, ${this[LNG]})`;\n    }\n\n    /**\n     * Returns a string of the form \"lat,lng\" for this LatLng. We round the\n     * lat/lng values to 6 decimal places by default.\n     * @param {number} [precision=6]\n     * @returns {string}\n     */\n    toUrlValue(precision = 6) {\n        precision = parseInt(precision);\n        return (\n            parseFloat(this[LAT].toFixed(precision)) +\n            ',' +\n            parseFloat(this[LNG].toFixed(precision))\n        );\n    }\n\n    [Symbol.iterator]() {\n        let i = 0;\n        return {\n            next: () => {\n                if (i < this.length) {\n                    return { value: this[i++], done: false };\n                } else {\n                    return { done: true };\n                }\n            },\n            [Symbol.iterator]() {\n                return this;\n            },\n        };\n    }\n}\n","import { EARTH_RADIUS, toRadians } from './utils.js';\nimport { convert } from './latlng.js';\n\nexport function computeDistanceBetweenHelper(from, to) {\n    const radFromLat = toRadians(from.lat());\n    const radFromLng = toRadians(from.lng());\n    const radToLat = toRadians(to.lat());\n    const radToLng = toRadians(to.lng());\n    return (\n        2 *\n        Math.asin(\n            Math.sqrt(\n                Math.pow(Math.sin((radFromLat - radToLat) / 2), 2) +\n                    Math.cos(radFromLat) *\n                        Math.cos(radToLat) *\n                        Math.pow(Math.sin((radFromLng - radToLng) / 2), 2)\n            )\n        )\n    );\n}\n\n/**\n * Returns the distance, in meters, between to LatLngs. You can optionally\n * specify a custom radius. The radius defaults to the radius of the Earth.\n * @param {LatLng} from\n * @param {LatLng} to\n * @param {number} [radius]\n * @returns {number} distance\n */\nexport default function computeDistanceBetween(\n    from,\n    to,\n    radius = EARTH_RADIUS\n) {\n    from = convert(from);\n    to = convert(to);\n    return computeDistanceBetweenHelper(from, to) * radius;\n}\n","import { computeDistanceBetween } from 'spherical-geometry-js';\n/**\n * Find the closest stop to the user's location or searched place.\n * @param stops List of stops from API.\n * @param state Location of user and/or search place.\n */\nexport function findClosestStop(stops, location) {\n    let closestDistance = Number.MAX_VALUE;\n    let closestStop;\n    for (const stop of stops) {\n        const distance = computeDistanceBetween(location, stop.position);\n        if (distance < closestDistance) {\n            closestStop = stop;\n            closestDistance = distance;\n        }\n    }\n    return closestStop;\n}\n/**\n * Find the closest stops to a given point.\n * @param stops List of stops from API.\n * @param location Location of point.\n * @param options.maxAmount Maximum number of stops to return.\n * @param options.maxDistance Maximum distance away to return.\n */\nexport function findClosestStops(stops, location, options = {}) {\n    const { maxDistance = Infinity, maxAmount } = options;\n    return stops\n        .map((stop) => {\n        const distance = computeDistanceBetween(location, stop.position);\n        return { stop, distance };\n    })\n        .filter(({ distance }) => distance < maxDistance)\n        .slice(0, maxAmount)\n        .map(({ stop }) => stop);\n}\n//# sourceMappingURL=closest-stop-worker.js.map","import { gtfsArrivalToDate, plainTime } from '../../shared/utils/date';\n/**\n * Find the best trip based on the current time of day,\n * along with other route details.\n * @param trips All trips for a route.\n */\nexport function getRouteDetails(trips, now) {\n    let firstStop;\n    let lastStop;\n    let smallestSequence = Infinity;\n    let largestSequence = -1;\n    let earliest = plainTime(23, 59, 59);\n    let latest = plainTime(0, 0, 0);\n    let earliestTrip;\n    let earliestTripStop;\n    let closestTrip;\n    let closestTripTime = Number.MAX_VALUE;\n    let closestTripStop;\n    const routeStops = new Set();\n    for (const trip of trips) {\n        for (const stopTime of trip.stop_times) {\n            const sequence = stopTime.stop_sequence;\n            if (trip.direction_id === 0) {\n                if (sequence < smallestSequence) {\n                    firstStop = stopTime.stop_id;\n                    smallestSequence = sequence;\n                }\n                if (sequence > largestSequence) {\n                    lastStop = stopTime.stop_id;\n                    largestSequence = sequence;\n                }\n            }\n            routeStops.add(stopTime.stop_id);\n            const timeDate = gtfsArrivalToDate(stopTime.arrival_time);\n            if (timeDate > latest) {\n                latest = timeDate;\n            }\n            if (timeDate < earliest) {\n                earliest = timeDate;\n                earliestTrip = trip.trip_id;\n                earliestTripStop = stopTime.stop_id;\n            }\n            if (timeDate.getTime() - now.getTime() < closestTripTime &&\n                timeDate.getTime() - now.getTime() > 0) {\n                closestTripTime = timeDate.getTime() - now.getTime();\n                closestTrip = trip.trip_id;\n                closestTripStop = stopTime.stop_id;\n            }\n        }\n        if (!closestTrip) {\n            //Too late for all bus routes\n            closestTripTime =\n                plainTime(earliest.getHours() + 24, earliest.getMinutes(), earliest.getSeconds()).getTime() - now.getTime();\n            closestTrip = earliestTrip;\n            closestTripStop = earliestTripStop;\n        }\n    }\n    return {\n        firstStop: firstStop,\n        lastStop: lastStop,\n        earliest,\n        latest,\n        stops: routeStops,\n        closestTrip: {\n            id: closestTrip,\n            minutes: Math.floor(closestTripTime / 60000),\n            stop: closestTripStop,\n        },\n    };\n}\n//# sourceMappingURL=route-details-worker.js.map","import { nowPlainTime } from '../../shared/utils/date';\nimport { registerPromiseWorker } from '../register';\nimport { findClosestStop } from './closest-stop-worker';\nimport { getRouteDetails } from './route-details-worker';\nlet stops;\nregisterPromiseWorker((message) => {\n    switch (message.type) {\n        case 'data':\n            stops = message.stops;\n            return undefined;\n        case 'closest_stop':\n            if (!stops) {\n                throw new Error('stops not ready');\n            }\n            return findClosestStop(stops, message.location);\n        case 'route_details':\n            return getRouteDetails(message.trips, nowPlainTime());\n        default:\n            return undefined;\n    }\n});\n//# sourceMappingURL=index.js.map"],"names":[],"mappings":"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"}