{"version":3,"file":"main.js","sources":["src/page/num.ts","src/load.ts","src/page/date.ts","src/main.ts"],"sourcesContent":["export const toInt = (n: string) => Number.parseInt(n, 10);\n","/**\n * Contains construstors and helper functions.  Avoids using the DOM for functions.\n * @author       Tiger Oakes <tigeroakes@gmail.com>\n * @copyright    2014 Tiger Oakes\n */\n\nimport { GTFSData, Stop, Trip } from './gtfs-types';\nimport { toInt } from './page/num';\n\nexport const enum Type {\n    ROUTE,\n    STOP,\n    TRIP,\n}\nexport const enum View {\n    LIST,\n\n    MAP_PRIMARY,\n    STREET_PRIMARY,\n}\n\nexport interface ActiveState {\n    Route: {\n        ID: string | null;\n        TRIP: string | null;\n    };\n    STOP: string | null;\n    View: {\n        ROUTE: View;\n        STOP: View;\n    };\n}\n\nexport let Active: ActiveState = {\n    Route: {\n        ID: null,\n        TRIP: null,\n    },\n    STOP: null,\n    View: {\n        ROUTE: View.LIST,\n        STOP: View.MAP_PRIMARY,\n    },\n};\n\nexport const updateEvent = new CustomEvent('pageupdate');\n\nnavigator.serviceWorker?.register('service-worker.js');\n\n/**\n * @type {Record<Type, Function>}\n */\nexport const openCallbacks: Record<Type, Function> = {} as any;\n\nexport const normal = {\n        url: 'assets/pins.png',\n        size: { height: 26, width: 24 },\n        scaledSize: { height: 26, width: 120 },\n        origin: { x: 0, y: 0 },\n        anchor: { x: 12, y: 12 },\n    } as google.maps.Icon,\n    unimportant = {\n        url: 'assets/pins.png',\n        size: { height: 26, width: 24 },\n        scaledSize: { height: 26, width: 120 },\n        origin: { x: 96, y: 0 },\n        anchor: { x: 12, y: 12 },\n    } as google.maps.Icon,\n    userShape = {\n        url: 'assets/pins.png',\n        size: { height: 26, width: 24 },\n        scaledSize: { height: 26, width: 120 },\n        origin: { x: 48, y: 0 },\n        anchor: { x: 12, y: 12 },\n    } as google.maps.Icon,\n    placeShape = {\n        url: 'assets/pins.png',\n        size: { height: 26, width: 24 },\n        scaledSize: { height: 26, width: 120 },\n        origin: { x: 72, y: 0 },\n        anchor: { x: 12, y: 23 },\n    } as google.maps.Icon,\n    stopShape = {\n        url: 'assets/pins.png',\n        size: { height: 26, width: 24 },\n        scaledSize: { height: 26, width: 120 },\n        origin: { x: 24, y: 0 },\n        anchor: { x: 12, y: 20 },\n    } as google.maps.Icon;\n\nexport function setActiveState(newState: ActiveState) {\n    Active = newState;\n}\n\n/**\n * Grabs the API data and parses it into a GTFSData object for the rest of the program.\n */\nexport function getScheduleData(): Promise<GTFSData> {\n    return fetch('api.json')\n        .then(res => {\n            if (res.ok) return res.json();\n            throw new Error(res.statusText);\n        })\n        .then(json => json as GTFSData);\n}\n\nexport function createElement<Tag extends keyof HTMLElementTagNameMap>(\n    type: Tag,\n    props: Partial<HTMLElementTagNameMap[Tag]>,\n) {\n    return Object.assign(document.createElement(type), props);\n}\n\nfunction getCurrentPosition() {\n    return new Promise<Position>((resolve, reject) => {\n        navigator.geolocation.getCurrentPosition(resolve, reject);\n    });\n}\n\nexport interface LocationUpdate {\n    stop: Stop['stop_id'];\n    location: Pick<Coordinates, 'latitude' | 'longitude'>;\n    custom: boolean;\n}\n\n/**\n * Locates the nearest bus stop to the user or custom location\n * @param {Promise} schedulePromise Schedule promise to wait for\n * @param {Coordinates} customLocation Location to use instead of GPS\n */\nlet runOnce = false;\nexport function locateUser(\n    busPromise: Promise<GTFSData>,\n    customLocation?: Pick<Coordinates, 'latitude' | 'longitude'>,\n): Promise<LocationUpdate> {\n    let locatePromise: Promise<{\n        coords: Pick<Coordinates, 'latitude' | 'longitude'>;\n        customLocationFlag?: boolean;\n    }>;\n    if (customLocation) {\n        locatePromise = Promise.resolve({\n            coords: customLocation,\n            customLocationFlag: true,\n        });\n    } else {\n        locatePromise = getCurrentPosition();\n    }\n\n    let closestDistance = Number.MAX_VALUE;\n    let closestStop: Stop['stop_id'];\n\n    return Promise.all([locatePromise, busPromise]).then(([e, schedule]) => {\n        const userPos = e.coords;\n        for (const stop_id of Object.keys(schedule.stops)) {\n            const stop = schedule.stops[stop_id];\n            const distance = Math.sqrt(\n                Math.pow(userPos.latitude - parseFloat(stop.stop_lat), 2) +\n                    Math.pow(userPos.longitude - parseFloat(stop.stop_lon), 2),\n            );\n            if (distance < closestDistance) {\n                closestStop = stop_id;\n                closestDistance = distance;\n            }\n        }\n        if (closestStop) {\n            const results = {\n                stop: closestStop,\n                location: userPos,\n                custom: e.customLocationFlag ? true : false,\n            };\n            if (runOnce) {\n                window.dispatchEvent(\n                    new CustomEvent('locationupdate', {\n                        detail: results,\n                    }),\n                );\n            }\n            return results;\n        } else {\n            throw Error(JSON.stringify(userPos));\n        }\n    });\n}\n\n/**\n * Creates a promise version of the document load event\n * @return {Promise<DocumentReadyState>} resolves if document has loaded\n */\nexport function documentLoad() {\n    if (\n        document.readyState === 'interactive' ||\n        document.readyState === 'complete'\n    ) {\n        return Promise.resolve(document.readyState);\n    }\n\n    return new Promise(resolve => {\n        document.addEventListener('readystatechange', () => {\n            if (document.readyState === 'interactive') {\n                resolve(document.readyState);\n            }\n        });\n    });\n}\n\n/**\n * Generates a link for href values. Meant to maintain whatever active data is avaliable.\n * @param {Type} type  \t\tType of item to change\n * @param {string} value \tID to change\n * @return {string} URL to use for href, based on active object.\n */\nfunction pageLink(type: Type, value: string) {\n    const params = new URLSearchParams();\n    switch (type) {\n        case Type.ROUTE:\n            params.set('route', value);\n\n            if (Active.Route.TRIP !== null) {\n                params.set('trip', Active.Route.TRIP);\n            }\n\n            if (Active.STOP !== null) {\n                params.set('stop', Active.STOP);\n            }\n            break;\n        case Type.STOP:\n            if (Active.Route.ID !== null) {\n                params.set('route', Active.Route.ID);\n            }\n            params.set('stop', value);\n            if (Active.Route.TRIP !== null) {\n                params.set('trip', Active.Route.TRIP);\n            }\n            break;\n        case Type.TRIP:\n            params.set('route', Active.Route.ID!);\n            params.set('trip', value);\n            if (Active.STOP !== null) {\n                params.set('stop', Active.STOP);\n            }\n            break;\n        default:\n            console.warn('Invalid type provided for link: %i', type);\n            break;\n    }\n    return `#!${params}`;\n}\n\nexport interface Linkable {\n    Type: Type;\n    Value: string;\n}\n\ntype DynamicLinkNode = HTMLAnchorElement & Linkable;\n\n/**\n * Creates an A element with custom click events for links.  Can update itself.\n * @param  {Type} type      What value to change in link\n * @param  {string} value   Value to use\n * @param  {boolean} update Wheter or not to listen for \"pageupdate\" event and update href\n * @return {Node}           A element with custom properties\n */\nexport function dynamicLinkNode(type: Type, value: string, update?: boolean) {\n    const node = document.createElement('a') as DynamicLinkNode;\n    node.Type = type;\n    node.Value = value;\n    node.href = pageLink(type, value);\n    node.addEventListener('click', clickEvent);\n    if (update) {\n        node.addEventListener('pageupdate', function() {\n            node.href = pageLink(type, value);\n        });\n    }\n\n    return node;\n}\n\n/**\n * Navigate to the page described by the `Linkable`.\n */\nexport function openLinkable(link: Linkable) {\n    const state = Active;\n    const val = link.Value;\n    const newLink = pageLink(link.Type, val);\n    const callback = openCallbacks[link.Type];\n    switch (link.Type) {\n        case Type.ROUTE:\n            state.Route.ID = val;\n            break;\n        case Type.STOP:\n            state.STOP = val;\n            break;\n        case Type.TRIP:\n            state.Route.TRIP = val;\n            break;\n    }\n    callback(val);\n    history.pushState(state, null as any, newLink);\n    ga?.('send', 'pageview', { page: newLink, title: document.title });\n}\n\n/**\n * Used for the click event of a dynamicLinkNode\n * @param  {Event} e\n */\nexport function clickEvent(this: Linkable, e: Event) {\n    e.preventDefault?.();\n    e.stopPropagation?.();\n    openLinkable(this);\n    return false;\n}\n\n/**\n * Returns an object with URL variables.\n */\nexport function getQueryVariables(): Partial<Record<string, string>> {\n    let query = '';\n    let vars: string[];\n    if (window.location.hash.indexOf('#!') > -1) {\n        query = window.location.hash.substring(\n            window.location.hash.indexOf('#!') + 2,\n        );\n        vars = query.split('&');\n    } else if (window.location.search.indexOf('_escaped_fragment_') > -1) {\n        query = window.location.search.substring(\n            window.location.search.indexOf('_escaped_fragment_') + 19,\n        );\n        vars = query.split('%26');\n    }\n\n    const result: Partial<Record<string, string>> = {};\n    if (query !== '') {\n        for (const parts of vars!) {\n            const [key, value] = parts.split('=');\n            result[key] = value;\n        }\n    }\n    return result;\n}\n\n/**\n * Sorts stop time keys\n * @param {GTFSData stop_times} stopTimes\n * @return ordered list\n */\nexport function sequence(stopTimes: Trip['stop_times']): string[] {\n    const stopSequence = [];\n    for (const key in stopTimes) {\n        stopSequence.push(key);\n    }\n    return stopSequence.sort((a, b) => toInt(a) - toInt(b));\n}\n","import { toInt } from './num.js';\n\n/**\n * Turns a date into a string with hours, minutes.\n * @param  {Date} \tdate Date to convert\n * @param  {string} date 24hr string in format 12:00:00 to convert to string in 12hr format\n * @return {string}    \tString representation of time\n */\nexport function stringTime(date: Date | string): string {\n    if (typeof date === 'string') {\n        if (\n            date.indexOf(':') > -1 &&\n            date.lastIndexOf(':') > date.indexOf(':')\n        ) {\n            const [hour, min, second] = date.split(':').map(toInt);\n            date = new Date(0, 0, 0, hour, min, second, 0);\n        }\n    }\n    if (typeof date != 'object') {\n        throw new TypeError(`date must be Date or string, not ${typeof date}`);\n    }\n\n    let m = 'am';\n    let displayHour = '';\n    let displayMinute = '';\n    const hr = date.getHours();\n    const min = date.getMinutes();\n\n    if (hr === 0) {\n        displayHour = '12';\n    } else if (hr === 12) {\n        displayHour = '12';\n        m = 'pm';\n    } else if (hr > 12) {\n        const mathHr = hr - 12;\n        displayHour = mathHr.toString();\n        m = 'pm';\n    } else {\n        displayHour = hr.toString();\n    }\n\n    if (min === 0) {\n        displayMinute = '';\n    } else if (min < 10) {\n        displayMinute = ':0' + min.toString();\n    } else {\n        displayMinute = ':' + min.toString();\n    }\n\n    return displayHour + displayMinute + m;\n}\n\n/**\n * Returns a date object based on the string given\n * @param  {string} string in format 13:00:00, from gtfs data\n * @return {Date}\n */\nexport function gtfsArrivalToDate(string: string): Date {\n    const [hour, min, second] = string.split(':').map(s => toInt(s));\n    let extraDays = 0;\n    let extraHours = 0;\n    if (hour > 23) {\n        extraDays = Math.floor(hour / 24);\n        extraHours = hour % 24;\n    }\n    return new Date(0, 0, 0 + extraDays, hour + extraHours, min, second, 0);\n}\n\n/**\n * Combines stringTime() and gtfsArrivalToDate()\n * @param  {string} string in format 13:00:00, from gtfs data\n * @return {string}        String representation of time\n */\nexport function gtfsArrivalToString(string: string) {\n    return stringTime(gtfsArrivalToDate(string));\n}\n\n/**\n * Returns the current time, with date stripped out\n * @return {Date} Current time in hour, min, seconds; other params set to 0\n */\nexport function nowDateTime(): Date {\n    const now = new Date();\n    return new Date(\n        0,\n        0,\n        0,\n        now.getHours(),\n        now.getMinutes(),\n        now.getSeconds(),\n        0,\n    );\n}\n","/**\n * Contains code to build UI. Interacts with DOM.\n * @author       Tiger Oakes <tigeroakes@gmail.com>\n * @copyright    2014 Tiger Oakes\n */\n\nimport { GTFSData, Route, Stop, Trip } from './gtfs-types.js';\nimport {\n    Active,\n    ActiveState,\n    clickEvent,\n    documentLoad,\n    dynamicLinkNode,\n    getQueryVariables,\n    getScheduleData,\n    Linkable,\n    locateUser,\n    LocationUpdate,\n    normal,\n    openCallbacks,\n    placeShape,\n    sequence,\n    setActiveState,\n    stopShape,\n    Type,\n    unimportant,\n    updateEvent,\n    userShape,\n    View,\n    createElement,\n} from './load.js';\nimport {\n    gtfsArrivalToDate,\n    gtfsArrivalToString,\n    nowDateTime,\n    stringTime,\n} from './page/date.js';\nimport { toInt } from './page/num.js';\n\nlet map: google.maps.Map | undefined;\nlet streetview: google.maps.StreetViewPanorama | undefined;\nlet autocomplete: google.maps.places.Autocomplete | undefined;\nlet boundsAllStops: google.maps.LatLngBounds | undefined;\nlet markers: StopMarker[] = [];\nlet userMapMarker: LinkableMarker | undefined;\nlet stopMarker: google.maps.Marker | undefined;\n\nconst documentPromise = documentLoad();\nconst schedulePromise = getScheduleData();\nconst locatePromise = locateUser(schedulePromise);\nlet placeMapMarker: LinkableMarker | undefined;\ntry {\n    loadMap();\n} catch (err) {\n    console.error(err);\n    locatePromise.then(function(position) {\n        if (!Active.STOP) openStop(position.stop);\n    });\n}\n\ntype LinkableMarker = google.maps.Marker & Linkable;\ninterface StopMarker extends LinkableMarker {\n    stop_id: string;\n    activeInRoute?: boolean;\n}\n\nfunction stopToPos(stop: Stop) {\n    return new google.maps.LatLng(\n        parseFloat(stop.stop_lat),\n        parseFloat(stop.stop_lon),\n    );\n}\n\nfunction loadMap() {\n    if (\n        !navigator.onLine ||\n        typeof google !== 'object' ||\n        typeof google.maps !== 'object'\n    ) {\n        documentPromise.then(function() {\n            document.body.classList.add('no-map');\n        });\n        throw new Error('Google Maps API has not loaded');\n    }\n    boundsAllStops = new google.maps.LatLngBounds();\n    markers = [];\n\n    function markersAndLatLng(schedule: GTFSData) {\n        return Promise.resolve().then(() => {\n            for (const stop of Object.values(schedule.stops)) {\n                const marker = new google.maps.Marker({\n                    position: stopToPos(stop),\n                    title: stop.stop_name,\n                    icon: normal,\n                }) as StopMarker;\n                marker.Type = Type.STOP;\n                marker.Value = stop.stop_id;\n                marker.stop_id = stop.stop_id;\n                google.maps.event.addListener(marker, 'click', clickEvent);\n                boundsAllStops!.extend(marker.getPosition()!);\n                markers.push(marker);\n            }\n            return {\n                markers: markers,\n                bounds: boundsAllStops!,\n            };\n        });\n    }\n\n    function mapLoad() {\n        return Promise.resolve().then(() => {\n            const mapElement =\n                Active.View.STOP === View.MAP_PRIMARY\n                    ? document.getElementById('map-canvas')!\n                    : document.getElementById('streetview-canvas')!;\n            const panoElement =\n                Active.View.STOP === View.STREET_PRIMARY\n                    ? document.getElementById('map-canvas')!\n                    : document.getElementById('streetview-canvas')!;\n\n            map = new google.maps.Map(mapElement, {\n                center: new google.maps.LatLng(19.6, -155.56),\n                zoom: 10,\n                mapTypeControlOptions: {\n                    position: google.maps.ControlPosition.TOP_CENTER,\n                },\n                panControlOptions: {\n                    position: google.maps.ControlPosition.RIGHT_TOP,\n                },\n                streetViewControlOptions: {\n                    position: google.maps.ControlPosition.RIGHT_TOP,\n                },\n                zoomControlOptions: {\n                    position: google.maps.ControlPosition.RIGHT_TOP,\n                },\n            });\n\n            streetview = new google.maps.StreetViewPanorama(panoElement, {\n                position: new google.maps.LatLng(19.723835, -155.084741),\n                visible: true,\n                pov: { heading: 34, pitch: 0 },\n                scrollwheel: false,\n                panControlOptions: {\n                    position: google.maps.ControlPosition.RIGHT_CENTER,\n                },\n                zoomControlOptions: {\n                    style: google.maps.ZoomControlStyle.SMALL,\n                    position: google.maps.ControlPosition.RIGHT_CENTER,\n                },\n                addressControl: false,\n            });\n            map.setStreetView(streetview!);\n\n            autocomplete = new google.maps.places.Autocomplete(\n                document.getElementById('search') as HTMLInputElement,\n            );\n            autocomplete.bindTo('bounds', map);\n            google.maps.event.addListener(\n                autocomplete,\n                'place_changed',\n                function() {\n                    const place = autocomplete!.getPlace();\n                    if (!place.geometry) return;\n                    const loc = place.geometry.location;\n                    console.log('Lat %s, Lon %s', loc.lat(), loc.lng());\n                    locateUser(schedulePromise, {\n                        latitude: loc.lat(),\n                        longitude: loc.lng(),\n                    }).then(position => {\n                        if (!placeMapMarker) {\n                            placeMapMarker = new google.maps.Marker({\n                                position: new google.maps.LatLng(\n                                    position.location.latitude,\n                                    position.location.longitude,\n                                ),\n                                title: 'Search Location',\n                                icon: placeShape,\n                                map: map,\n                                animation: google.maps.Animation.DROP,\n                                zIndex: 1000,\n                            }) as LinkableMarker;\n                            placeMapMarker.Type = Type.STOP;\n                            google.maps.event.addListener(\n                                placeMapMarker,\n                                'click',\n                                clickEvent,\n                            );\n                        }\n                        placeMapMarker.Value = position.stop;\n                        openStop(position.stop);\n                    });\n                },\n            );\n            return map;\n        });\n    }\n\n    Promise.all([\n        documentPromise.then(mapLoad),\n        schedulePromise.then(markersAndLatLng),\n    ]).then(function([map, { markers, bounds }]) {\n        map.setCenter(bounds.getCenter());\n        map.fitBounds(bounds);\n        google.maps.event.addListener(map, 'bounds_changed', function() {\n            const mapBounds = map.getBounds()!;\n            for (const marker of markers) {\n                if (mapBounds.contains(marker.getPosition()!)) {\n                    if (marker.getMap() !== map) marker.setMap(map);\n                } else {\n                    marker.setMap(null);\n                }\n            }\n        });\n        markers.forEach(marker => marker.setMap(map));\n        locatePromise.then(function(position) {\n            userMapMarker = new google.maps.Marker({\n                position: new google.maps.LatLng(\n                    position.location.latitude,\n                    position.location.longitude,\n                ),\n                title: position.custom ? 'Location of Place' : 'My Location',\n                icon: position.custom ? placeShape : userShape,\n                map: map,\n                animation: google.maps.Animation.DROP,\n                zIndex: 1000,\n            }) as LinkableMarker;\n            userMapMarker.Type = Type.STOP;\n            userMapMarker.Value = position.stop;\n            google.maps.event.addListener(userMapMarker, 'click', clickEvent);\n            if (!Active.STOP) openStop(position.stop);\n            window.addEventListener('locationupdate', (evt: Event) => {\n                const { custom, location } = (evt as CustomEvent<\n                    LocationUpdate\n                >).detail;\n                userMapMarker!.setIcon(custom ? placeShape : userShape);\n                userMapMarker!.setPosition(\n                    new google.maps.LatLng(\n                        location.latitude,\n                        location.longitude,\n                    ),\n                );\n            });\n        });\n    });\n\n    window.addEventListener('resize', function() {\n        google.maps.event.trigger(map, 'resize');\n        google.maps.event.trigger(streetview, 'resize');\n        if (!Active.Route.ID) {\n            map!.setCenter(boundsAllStops!.getCenter());\n            map!.fitBounds(boundsAllStops!);\n        }\n    });\n}\n\nschedulePromise.then(updateAside);\nfunction updateAside(schedule: GTFSData) {\n    interface Aside extends HTMLElement {\n        routeListItems: RouteListItem[];\n    }\n\n    interface RouteListItem extends HTMLLIElement {\n        route_id: string;\n    }\n\n    let aside: Aside | null = null;\n    const routeListItems: RouteListItem[] = [];\n    function generateListItems() {\n        for (const route of Object.values(schedule.routes)) {\n            const listItem = document.createElement('li') as RouteListItem;\n            listItem.className = 'sidebar__item routes__item';\n            listItem.style.borderColor = `#${route.route_color}`;\n            listItem.route_id = route.route_id;\n            const link = dynamicLinkNode(Type.ROUTE, route.route_id, true);\n            link.className = 'sidebar__link routes__link';\n            link.textContent = route.route_long_name;\n            listItem.append(link);\n            routeListItems.push(listItem);\n        }\n    }\n\n    documentPromise.then(function() {\n        if (aside != undefined) {\n            insertListItems(aside);\n        } else {\n            generateListItems();\n            aside = document.getElementById('aside') as Aside;\n            aside.routeListItems = routeListItems;\n            insertListItems(aside);\n        }\n    });\n\n    function insertListItems(aside: Aside) {\n        const nearbyList = document.getElementById('nearby')!;\n        const otherList = document.getElementById('other')!;\n        otherList.append(...aside.routeListItems);\n        locatePromise.then(function(result) {\n            for (const item of aside.routeListItems) {\n                if (\n                    schedule.stops[result.stop].routes.includes(item.route_id)\n                ) {\n                    nearbyList.appendChild(item);\n                } else {\n                    otherList.appendChild(item);\n                }\n            }\n        });\n    }\n}\n\ndocumentPromise.then(function() {\n    uiEvents();\n});\n\nfunction openActive(state: ActiveState) {\n    console.log(state);\n    return Promise.all([\n        openRoute(state.Route.ID!).then(bestTrip =>\n            openTrip(state.Route.TRIP ? state.Route.TRIP : bestTrip!),\n        ),\n        state.STOP ? openStop(state.STOP) : undefined,\n    ]).then(() => {});\n}\n\nPromise.all([documentPromise, schedulePromise]).then(function() {\n    if (!window.history.state && window.location.search.includes('#!')) {\n        const vars = getQueryVariables();\n        Active.Route.ID = vars['route'] || Active.Route.ID;\n        Active.Route.TRIP = vars['trip'] || Active.Route.TRIP;\n        Active.STOP = vars['stop'] || Active.STOP;\n\n        openActive(Active);\n    } else if (window.history.state) {\n        setActiveState(window.history.state);\n        openActive(Active);\n    }\n});\n\nwindow.onhashchange = function() {\n    const vars = getQueryVariables();\n    Active.Route.ID = vars['route'] || Active.Route.ID;\n    Active.Route.TRIP = vars['trip'] || Active.Route.TRIP;\n    Active.STOP = vars['stop'] || Active.STOP;\n    openActive(Active);\n};\nwindow.onpopstate = function(e: PopStateEvent) {\n    setActiveState(e.state);\n    openActive(Active);\n};\n\n/**\n * Adds click events to buttons in the site.\n */\nfunction uiEvents() {\n    if (!navigator.onLine) {\n        document.getElementById('main')!.classList.add('offline');\n    }\n    document\n        .getElementById('map-toggle')!\n        .addEventListener('click', switchMapStreetview);\n    const select = document.getElementById('trip-select') as HTMLSelectElement &\n        Linkable;\n    select.Type = Type.TRIP;\n    select.addEventListener('change', function(e) {\n        select.Value = select.options[select.selectedIndex].value;\n        clickEvent.call(select, e);\n    });\n\n    function toggleSidebar() {\n        document.getElementById('aside')!.classList.toggle('open');\n    }\n    document\n        .getElementById('screen-cover')!\n        .addEventListener('click', toggleSidebar);\n    document.getElementById('menu')!.addEventListener('click', toggleSidebar);\n    document\n        .getElementById('alt-menu')!\n        .addEventListener('click', toggleSidebar);\n}\n\nfunction removeChildren(parent: HTMLElement) {\n    while (parent.firstChild) parent.removeChild(parent.firstChild);\n}\n\n/**\n * Swaps map and streetview divs\n * @return {[type]} [description]\n */\nfunction switchMapStreetview(this: HTMLElement) {\n    if (!map || !streetview) {\n        console.error('Map and StreetViewPanorama have not loaded');\n        throw new TypeError();\n    }\n\n    const mapParent = document.getElementById('map')!;\n    const panoParent = document.getElementById('streetview-header')!;\n\n    if (Active.View.STOP === View.MAP_PRIMARY) {\n        mapParent.insertBefore(\n            document.getElementById('streetview-canvas')!,\n            mapParent.firstChild,\n        );\n        panoParent.insertBefore(\n            document.getElementById('map-canvas')!,\n            mapParent.firstChild,\n        );\n        this.classList.add('on');\n        Active.View.STOP = View.STREET_PRIMARY;\n    } else if (Active.View.STOP === View.STREET_PRIMARY) {\n        mapParent.insertBefore(\n            document.getElementById('map-canvas')!,\n            mapParent.firstChild,\n        );\n        panoParent.insertBefore(\n            document.getElementById('streetview-canvas')!,\n            mapParent.firstChild,\n        );\n        this.classList.remove('on');\n        Active.View.STOP = View.MAP_PRIMARY;\n    }\n    dispatchEvent(updateEvent);\n}\n\n/**\n * Creates a route UI and opens the section if the map is currently in fullscreen mode.\n * @param  {string} route_id ID of the route\n * @return {Promise<string>} trip_id that can be used in openTrip. Best matches time and open stop, if any.\n * @throws {string} If the ID does not exist\n */\nfunction openRoute(route_id: Route['route_id']) {\n    return schedulePromise.then(buses => {\n        const thisRoute = buses.routes[route_id];\n        if (!thisRoute || !thisRoute.route_id) {\n            console.error('Invalid Route %s', route_id);\n            //throw route_id;\n            return;\n        }\n\n        Active.Route.ID = route_id;\n        Active.Route.TRIP = null;\n\n        document.title = thisRoute.route_long_name;\n\n        document.body.style.setProperty(\n            '--route-color',\n            `#${thisRoute.route_color}`,\n        );\n        document.body.style.setProperty(\n            '--route-text-color',\n            `#${thisRoute.route_text_color}`,\n        );\n\n        const name = document.getElementById('route_long_name')!;\n        name.textContent = thisRoute.route_long_name;\n\n        let firstStop: Stop['stop_id'] | undefined;\n        let lastStop: Stop['stop_id'] | undefined;\n        let largest = 0;\n        let earliest = new Date(0, 0, 0, 23, 59, 59, 0);\n        let latest = new Date(0, 0, 0, 0, 0, 0, 0);\n        let earliestTrip: Trip['trip_id'] | undefined;\n        let earliestTripStop: Stop['stop_id'] | undefined;\n\n        const nowTime = nowDateTime();\n        let closestTrip: Trip['trip_id'] | undefined;\n        let closestTripTime = Number.MAX_VALUE;\n        let closestTripStop: Stop['stop_id'] | undefined;\n        const select = document.getElementById('trip-select')!;\n        removeChildren(select);\n\n        const routeStops = new Set<Stop['stop_id']>();\n\n        for (const trip_id of Object.keys(thisRoute.trips)) {\n            const trip = thisRoute.trips[trip_id];\n            for (const stop in trip.stop_times) {\n                if (stop == '1' && toInt(trip.direction_id) === 0) {\n                    firstStop = trip.stop_times[stop].stop_id;\n                } else {\n                    if (\n                        toInt(stop) > largest &&\n                        toInt(trip.direction_id) === 0\n                    ) {\n                        largest = toInt(stop);\n                        lastStop = trip.stop_times[stop].stop_id;\n                    }\n                }\n\n                routeStops.add(trip.stop_times[stop].stop_id);\n\n                const timeDate = gtfsArrivalToDate(\n                    trip.stop_times[stop].arrival_time,\n                );\n                if (timeDate > latest) {\n                    latest = timeDate;\n                }\n                if (timeDate < earliest) {\n                    earliest = timeDate;\n                    earliestTrip = trip.trip_id;\n                    earliestTripStop = trip.stop_times[stop].stop_id;\n                }\n\n                if (\n                    timeDate.getTime() - nowTime.getTime() < closestTripTime &&\n                    timeDate.getTime() - nowTime.getTime() > 0\n                ) {\n                    closestTripTime = timeDate.getTime() - nowTime.getTime();\n                    closestTrip = trip.trip_id;\n                    closestTripStop = trip.stop_times[stop].stop_id;\n                }\n            }\n            if (!closestTrip) {\n                //Too late for all bus routes\n                closestTripTime =\n                    new Date(\n                        0,\n                        0,\n                        1,\n                        earliest.getHours(),\n                        earliest.getMinutes(),\n                        earliest.getSeconds(),\n                        0,\n                    ).getTime() - nowTime.getTime();\n                closestTrip = earliestTrip;\n                closestTripStop = earliestTripStop;\n            }\n            const option = createElement('option', {\n                value: trip.trip_id,\n                textContent: trip.trip_short_name,\n            });\n            select.appendChild(option);\n        }\n\n        const minString =\n            Math.floor(closestTripTime / 60000) != 1\n                ? Math.floor(closestTripTime / 60000) + ' minutes'\n                : '1 minute';\n        document.getElementById('place-value')!.textContent =\n            'Between ' +\n            buses!.stops[firstStop!].stop_name +\n            ' - ' +\n            buses!.stops[lastStop!].stop_name;\n        document.getElementById('time-value')!.textContent =\n            stringTime(earliest) + ' - ' + stringTime(latest);\n        document.getElementById('next-stop-value')!.textContent =\n            'Reaches ' +\n            buses!.stops[closestTripStop!].stop_name +\n            ' in ' +\n            minString;\n\n        document.getElementById('main')!.classList.add('open');\n\n        if (\n            navigator.onLine &&\n            typeof google === 'object' &&\n            typeof google.maps === 'object'\n        ) {\n            const routeBounds = new google.maps.LatLngBounds();\n            for (const marker of markers) {\n                if (routeStops.has(marker.stop_id)) {\n                    marker.setIcon(normal);\n                    marker.setZIndex(200);\n                    marker.activeInRoute = true;\n                    routeBounds.extend(marker.getPosition()!);\n                } else {\n                    marker.setIcon(unimportant);\n                    marker.setZIndex(null);\n                    marker.activeInRoute = false;\n                }\n            }\n            if (stopMarker) {\n                stopMarker.setIcon(stopShape);\n                stopMarker.setZIndex(300);\n            }\n\n            google.maps.event.trigger(map, 'resize');\n            map!.setCenter(routeBounds.getCenter());\n            map!.fitBounds(routeBounds);\n            google.maps.event.trigger(streetview, 'resize');\n        }\n\n        window.dispatchEvent(updateEvent);\n        openTrip(closestTrip!);\n        return closestTrip;\n    });\n}\n\n/**\n * Creates a Stop fragment in the #stop element\n * @param  {[type]} stop_id Id of the stop to use\n * @return {void}           Creates an element\n */\nfunction openStop(stop_id: Stop['stop_id']) {\n    return schedulePromise.then(buses => {\n        const thisStop = buses.stops[stop_id];\n        if (!thisStop || !thisStop.stop_id) {\n            console.error('Invalid Stop %s', stop_id);\n            //throw stop_id;\n            return;\n        }\n\n        Active.STOP = stop_id;\n\n        if (streetview) {\n            streetview.setPosition(stopToPos(thisStop));\n        }\n        if (map) {\n            for (const marker of markers) {\n                if (marker.activeInRoute || Active.Route.ID == null) {\n                    marker.setIcon(normal);\n                } else {\n                    marker.setIcon(unimportant);\n                }\n                if (marker.stop_id === thisStop.stop_id) {\n                    stopMarker = marker;\n                }\n            }\n\n            stopMarker!.setIcon(stopShape);\n            stopMarker!.setZIndex(300);\n\n            streetview!.setPosition(stopMarker!.getPosition()!);\n            google.maps.event.trigger(streetview, 'resize');\n            google.maps.event.addListener(\n                streetview!,\n                'pano_changed',\n                function() {\n                    document.getElementById(\n                        'address',\n                    )!.textContent = streetview!.getLocation().description!;\n                    streetview!.setPov(streetview!.getPhotographerPov());\n                },\n            );\n        }\n        if (!streetview) {\n            document.getElementById('stop')!.classList.add('no-streetview');\n        }\n\n        document.getElementById('stop_name')!.textContent = thisStop.stop_name;\n\n        const list = document.getElementById('connections')!;\n        removeChildren(list);\n        for (const route_id of thisStop.routes) {\n            const route = buses.routes[route_id];\n            const linkItem = dynamicLinkNode(Type.ROUTE, route_id, false);\n            linkItem.className = 'connections__link';\n            linkItem.style.borderColor = `#${route.route_color}`;\n            linkItem.textContent = route.route_long_name;\n\n            const listItem = document.createElement('li');\n            listItem.className = 'connections__item';\n            listItem.append(linkItem);\n            if (Active.Route.ID === route_id) {\n                listItem.classList.add('connections__item--active-route');\n            }\n            list.append(listItem);\n        }\n\n        document.getElementById('main')!.classList.add('open-stop');\n        window.dispatchEvent(updateEvent);\n    });\n}\n\nfunction openTrip(trip_id: Trip['trip_id']) {\n    return schedulePromise.then(buses => {\n        const route = buses.routes[Active.Route.ID!];\n        const trip = route.trips[trip_id];\n        if (!trip || !trip.trip_id) {\n            console.error(\n                'Invalid trip %s in route %s',\n                trip_id,\n                Active.Route.ID,\n            );\n            //throw trip_id;\n            return;\n        }\n\n        Active.Route.TRIP = trip_id;\n\n        const schedule = document.getElementById('schedule')!;\n        removeChildren(schedule);\n\n        const stopSequence = sequence(trip.stop_times);\n\n        const select = document.getElementById(\n            'trip-select',\n        ) as HTMLSelectElement;\n        for (let option = 0; option < select.options.length; option++) {\n            if (select.options[option].value === trip_id) {\n                select.selectedIndex = option;\n                select.options[option].selected = true;\n                break;\n            }\n        }\n\n        document.getElementById('week-days-value')!.textContent =\n            buses.calendar[trip.service_id].text_name;\n\n        for (const sequence of stopSequence) {\n            const tripStop = trip.stop_times[sequence];\n            const routeListItem = dynamicLinkNode(Type.STOP, tripStop.stop_id);\n            routeListItem.className = 'schedule__stop';\n\n            const lines = createElement('div', { className: 'lines' });\n            for (let j = 0; j < 2; j++) {\n                const line = createElement('span', { className: 'line' });\n                lines.appendChild(line);\n            }\n            routeListItem.appendChild(lines);\n\n            const name = createElement('span', {\n                className: 'schedule__stopname name',\n                textContent: buses.stops[tripStop.stop_id].stop_name,\n            });\n            routeListItem.appendChild(name);\n\n            const time = createElement('time', {\n                className: 'schedule__time',\n                textContent: gtfsArrivalToString(tripStop.arrival_time),\n            });\n            routeListItem.appendChild(time);\n\n            const connection = createElement('div', {\n                className: 'connections',\n            });\n            for (const connectRoute of buses.stops[tripStop.stop_id].routes) {\n                if (connectRoute === Active.Route.ID) {\n                    continue;\n                }\n\n                const item = createElement('span', {\n                    className: 'route-dash',\n                    title: buses.routes[connectRoute].route_long_name,\n                });\n                item.style.backgroundColor =\n                    buses.routes[connectRoute].route_color;\n\n                connection.appendChild(item);\n            }\n            routeListItem.appendChild(connection);\n            schedule.appendChild(routeListItem);\n        }\n\n        window.dispatchEvent(updateEvent);\n    });\n}\n\nopenCallbacks[Type.ROUTE] = openRoute;\nopenCallbacks[Type.STOP] = openStop;\nopenCallbacks[Type.TRIP] = openTrip;\n"],"names":["toInt","n","Number","parseInt","Type","View","Active","Route","ID","TRIP","STOP","ROUTE","LIST","MAP_PRIMARY","updateEvent","CustomEvent","navigator","serviceWorker","register","openCallbacks","normal","url","size","height","width","scaledSize","origin","x","y","anchor","unimportant","userShape","placeShape","stopShape","setActiveState","newState","createElement","type","props","Object","assign","document","locateUser","busPromise","customLocation","locatePromise","Promise","resolve","coords","customLocationFlag","reject","geolocation","getCurrentPosition","closestStop","closestDistance","MAX_VALUE","all","then","e","schedule","userPos","stop_id","keys","stops","stop","distance","Math","sqrt","pow","latitude","parseFloat","stop_lat","longitude","stop_lon","location","custom","Error","JSON","stringify","pageLink","value","params","URLSearchParams","set","console","warn","dynamicLinkNode","update","node","Value","href","addEventListener","clickEvent","preventDefault","stopPropagation","link","state","val","newLink","callback","history","pushState","ga","page","title","openLinkable","this","getQueryVariables","vars","query","window","hash","indexOf","substring","split","search","result","parts","key","stringTime","date","lastIndexOf","hour","min","second","map","Date","TypeError","m","displayHour","displayMinute","hr","getHours","getMinutes","toString","gtfsArrivalToDate","string","s","extraDays","extraHours","floor","gtfsArrivalToString","streetview","autocomplete","boundsAllStops","userMapMarker","stopMarker","markers","documentPromise","readyState","schedulePromise","fetch","res","ok","json","statusText","placeMapMarker","onLine","google","maps","body","classList","add","LatLngBounds","mapElement","getElementById","panoElement","STREET_PRIMARY","Map","center","LatLng","zoom","mapTypeControlOptions","position","ControlPosition","TOP_CENTER","panControlOptions","RIGHT_TOP","streetViewControlOptions","zoomControlOptions","StreetViewPanorama","visible","pov","heading","pitch","scrollwheel","RIGHT_CENTER","style","ZoomControlStyle","SMALL","addressControl","setStreetView","places","Autocomplete","bindTo","event","addListener","place","getPlace","geometry","loc","log","lat","lng","Marker","icon","animation","Animation","DROP","zIndex","openStop","values","marker","stopToPos","stop_name","extend","getPosition","push","bounds","setCenter","getCenter","fitBounds","mapBounds","getBounds","contains","getMap","setMap","forEach","evt","detail","setIcon","setPosition","trigger","loadMap","err","error","openActive","openRoute","bestTrip","openTrip","undefined","removeChildren","parent","firstChild","removeChild","switchMapStreetview","mapParent","panoParent","insertBefore","remove","dispatchEvent","route_id","buses","thisRoute","routes","firstStop","lastStop","route_long_name","setProperty","route_color","route_text_color","textContent","earliestTrip","earliestTripStop","largest","earliest","latest","nowTime","now","getSeconds","nowDateTime","closestTrip","closestTripStop","closestTripTime","select","routeStops","Set","trip_id","trips","trip","stop_times","direction_id","timeDate","arrival_time","getTime","option","trip_short_name","appendChild","minString","routeBounds","has","setZIndex","activeInRoute","thisStop","getLocation","description","setPov","getPhotographerPov","list","route","linkItem","className","borderColor","listItem","append","stopSequence","stopTimes","sort","a","b","sequence","options","length","selectedIndex","selected","calendar","service_id","text_name","tripStop","routeListItem","lines","j","line","name","time","connection","connectRoute","item","backgroundColor","aside","routeListItems","insertListItems","nearbyList","otherList","includes","generateListItems","toggleSidebar","toggle","call","uiEvents","onhashchange","onpopstate"],"mappings":"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"}