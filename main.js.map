{"version":3,"file":"main.js","sources":["src/load.ts","src/main.ts"],"sourcesContent":["/**\n * Contains construstors and helper functions.  Avoids using the DOM for functions.\n * @author       Tiger Oakes <tigeroakes@gmail.com>\n * @copyright    2014 Tiger Oakes\n */\n\nimport { Calendar, GTFSData, Stop, Trip } from './gtfs-types';\n\nexport const enum Type {\n    ROUTE,\n    STOP,\n    TRIP,\n}\nexport const enum View {\n    LIST,\n    TIMETABLE,\n\n    MAP_PRIMARY,\n    STREET_PRIMARY,\n}\n\nexport interface ActiveState {\n    Route: {\n        ID: string | null;\n        TRIP: string | null;\n    };\n    STOP: string | null;\n    View: {\n        ROUTE: View;\n        STOP: View;\n    };\n}\n\nexport let Active: ActiveState = {\n    Route: {\n        ID: null,\n        TRIP: null,\n    },\n    STOP: null,\n    View: {\n        ROUTE: View.LIST,\n        STOP: View.MAP_PRIMARY,\n    },\n};\n\nexport const updateEvent = new CustomEvent('pageupdate');\n\nif (navigator.serviceWorker) {\n    navigator.serviceWorker.register('service-worker.js');\n}\n\n/**\n * @type {Record<Type, Function>}\n */\nexport const openCallbacks: Record<Type, Function> = {} as any;\n\nexport const normal = {\n        url: 'assets/pins.png',\n        size: { height: 26, width: 24 },\n        scaledSize: { height: 26, width: 120 },\n        origin: { x: 0, y: 0 },\n        anchor: { x: 12, y: 12 },\n    } as google.maps.Icon,\n    unimportant = {\n        url: 'assets/pins.png',\n        size: { height: 26, width: 24 },\n        scaledSize: { height: 26, width: 120 },\n        origin: { x: 96, y: 0 },\n        anchor: { x: 12, y: 12 },\n    } as google.maps.Icon,\n    userShape = {\n        url: 'assets/pins.png',\n        size: { height: 26, width: 24 },\n        scaledSize: { height: 26, width: 120 },\n        origin: { x: 48, y: 0 },\n        anchor: { x: 12, y: 12 },\n    } as google.maps.Icon,\n    placeShape = {\n        url: 'assets/pins.png',\n        size: { height: 26, width: 24 },\n        scaledSize: { height: 26, width: 120 },\n        origin: { x: 72, y: 0 },\n        anchor: { x: 12, y: 23 },\n    } as google.maps.Icon,\n    stopShape = {\n        url: 'assets/pins.png',\n        size: { height: 26, width: 24 },\n        scaledSize: { height: 26, width: 120 },\n        origin: { x: 24, y: 0 },\n        anchor: { x: 12, y: 20 },\n    } as google.maps.Icon;\n\nexport function setActiveState(newState: ActiveState) {\n    Active = newState;\n}\n\nfunction xhr(url: string, responseType?: XMLHttpRequestResponseType) {\n    return new Promise<unknown>((resolve, reject) => {\n        const rq = new XMLHttpRequest();\n        rq.open('GET', url);\n        if (responseType) rq.responseType = responseType;\n        rq.onload = function() {\n            if (this.status === 200) {\n                resolve(this.response);\n            } else {\n                reject(Error(this.statusText));\n            }\n        };\n        rq.onerror = function() {\n            reject(Error('Network Error'));\n        };\n        rq.send();\n    });\n}\n\nfunction makeCalendarTextName(days: Calendar['days']) {\n    switch (days.join(', ')) {\n        case 'true, true, true, true, true, true, true':\n            return 'Daily';\n        case 'false, true, true, true, true, true, true':\n            return 'Monday - Saturday';\n        case 'false, true, true, true, true, true, false':\n            return 'Monday - Friday';\n        case 'true, false, false, false, false, false, true':\n            return 'Saturday - Sunday';\n        case 'false, false, false, false, false, false, true':\n            return 'Saturday';\n        default:\n            const firstDay = days.indexOf(true);\n            const lastDay = days.lastIndexOf(true);\n\n            const reference = [\n                'Sunday',\n                'Monday',\n                'Tuesday',\n                'Wednesday',\n                'Thursday',\n                'Friday',\n                'Saturday',\n            ];\n            if (firstDay === lastDay) {\n                return reference[firstDay];\n            } else {\n                return reference[firstDay] + ' - ' + reference[lastDay];\n            }\n    }\n}\n\n/**\n * Grabs the API data and parses it into a GTFSData object for the rest of the program.\n */\nexport function getScheduleData(): Promise<GTFSData> {\n    return xhr('api.json', 'json').then(json => json as GTFSData);\n}\n\nfunction getCurrentPosition() {\n    return new Promise<Position>((resolve, reject) => {\n        navigator.geolocation.getCurrentPosition(resolve, reject);\n    });\n}\n\nexport interface LocationUpdate {\n    stop: Stop['stop_id'];\n    location: Pick<Coordinates, 'latitude' | 'longitude'>;\n    custom: boolean;\n}\n\n/**\n * Locates the nearest bus stop to the user or custom location\n * @param {Promise} schedulePromise Schedule promise to wait for\n * @param {Coordinates} customLocation Location to use instead of GPS\n */\nlet runOnce = false;\nexport function locateUser(\n    busPromise: Promise<GTFSData>,\n    customLocation?: Pick<Coordinates, 'latitude' | 'longitude'>,\n): Promise<LocationUpdate> {\n    let locatePromise: Promise<{\n        coords: Pick<Coordinates, 'latitude' | 'longitude'>;\n        customLocationFlag?: boolean;\n    }>;\n    if (customLocation) {\n        locatePromise = Promise.resolve({\n            coords: customLocation,\n            customLocationFlag: true,\n        });\n    } else {\n        locatePromise = getCurrentPosition();\n    }\n\n    let closestDistance = Number.MAX_VALUE;\n    let closestStop: Stop['stop_id'];\n\n    return Promise.all([locatePromise, busPromise]).then(([e, schedule]) => {\n        const userPos = e.coords;\n        for (const stop_id of Object.keys(schedule.stops)) {\n            const stop = schedule.stops[stop_id];\n            const distance = Math.sqrt(\n                Math.pow(userPos.latitude - parseFloat(stop.stop_lat), 2) +\n                    Math.pow(userPos.longitude - parseFloat(stop.stop_lon), 2),\n            );\n            if (distance < closestDistance) {\n                closestStop = stop_id;\n                closestDistance = distance;\n            }\n        }\n        if (closestStop) {\n            const results = {\n                stop: closestStop,\n                location: userPos,\n                custom: e.customLocationFlag ? true : false,\n            };\n            if (runOnce) {\n                window.dispatchEvent(\n                    new CustomEvent('locationupdate', {\n                        detail: results,\n                    }),\n                );\n            }\n            return results;\n        } else {\n            throw Error(JSON.stringify(userPos));\n        }\n    });\n}\n\n/**\n * Creates a promise version of the document load event\n * @return {Promise<DocumentReadyState>} resolves if document has loaded\n */\nexport function documentLoad() {\n    if (\n        document.readyState === 'interactive' ||\n        document.readyState === 'complete'\n    ) {\n        return Promise.resolve(document.readyState);\n    }\n\n    return new Promise(resolve => {\n        document.addEventListener('readystatechange', () => {\n            if (document.readyState === 'interactive') {\n                resolve(document.readyState);\n            }\n        });\n    });\n}\n\n/**\n * Turns a number into a boolean.\n * @param  {int} i   0 returns false, 1 returns true\n * @return {boolean}\n */\nfunction iB(i: number | string): boolean {\n    return parseInt(i as string, 10) !== 0 ? true : false;\n}\n\n/**\n * Generates a link for href values. Meant to maintain whatever active data is avaliable.\n * @param {Type} type  \t\tType of item to change\n * @param {string} value \tID to change\n * @return {string} URL to use for href, based on active object.\n */\nfunction pageLink(type: Type, value: string) {\n    let link = '';\n    switch (type) {\n        case Type.ROUTE:\n            link += '#!route=' + value;\n\n            if (Active.Route.TRIP !== null) {\n                link += '&trip=' + Active.Route.TRIP;\n            }\n\n            if (Active.STOP !== null) {\n                link += '&stop=' + Active.STOP;\n            }\n            break;\n        case Type.STOP:\n            if (Active.Route.ID !== null) {\n                link += '#!route=' + Active.Route.ID;\n            } else {\n                link += '#!';\n            }\n            link += '&stop=' + value;\n            if (Active.Route.TRIP !== null) {\n                link += '&trip=' + Active.Route.TRIP;\n            }\n            break;\n        case Type.TRIP:\n            link += '#!route= ' + Active.Route.ID + '&trip=' + value;\n            if (Active.STOP !== null) {\n                link += '&stop=' + Active.STOP;\n            }\n            break;\n        default:\n            console.warn('Invalid type provided for link: %i', type);\n            break;\n    }\n    return link;\n}\n\nexport interface Linkable {\n    Type: Type;\n    Value: string;\n}\n\ntype DynamicLinkNode = HTMLAnchorElement & Linkable;\n\n/**\n * Creates an A element with custom click events for links.  Can update itself.\n * @param  {Type} type      What value to change in link\n * @param  {string} value   Value to use\n * @param  {boolean} update Wheter or not to listen for \"pageupdate\" event and update href\n * @return {Node}           A element with custom properties\n */\nexport function dynamicLinkNode(type: Type, value: string, update?: boolean) {\n    const node = document.createElement('a') as DynamicLinkNode;\n    node.Type = type;\n    node.Value = value;\n    node.href = pageLink(type, value);\n    node.addEventListener('click', clickEvent);\n    if (update) {\n        node.addEventListener('pageupdate', function() {\n            node.href = pageLink(type, value);\n        });\n    }\n\n    return node;\n}\n\n/**\n * Used for the click event of a dynamicLinkNode\n * @param  {Event} e\n */\nexport function clickEvent(this: Linkable, e: Event) {\n    if (e.preventDefault) {\n        e.preventDefault();\n    }\n    if (e.stopPropagation) {\n        e.stopPropagation();\n    }\n    const state = Active;\n    const val = this.Value;\n    const newLink = pageLink(this.Type, val);\n    const callback = openCallbacks[this.Type];\n    switch (this.Type) {\n        case Type.ROUTE:\n            state.Route.ID = val;\n            break;\n        case Type.STOP:\n            state.STOP = val;\n            break;\n        case Type.TRIP:\n            state.Route.TRIP = val;\n            break;\n    }\n    callback(val);\n    history.pushState(state, null as any, newLink);\n    if (ga) ga('send', 'pageview', { page: newLink, title: document.title });\n    return false;\n}\n\n/**\n * Turns a date into a string with hours, minutes.\n * @param  {Date} \tdate Date to convert\n * @param  {string} date 24hr string in format 12:00:00 to convert to string in 12hr format\n * @return {string}    \tString representation of time\n */\nexport function stringTime(date: Date | string): string {\n    if (typeof date === 'string') {\n        if (\n            date.indexOf(':') > -1 &&\n            date.lastIndexOf(':') > date.indexOf(':')\n        ) {\n            const split = date.split(':');\n            date = new Date(\n                0,\n                0,\n                0,\n                parseInt(split[0], 10),\n                parseInt(split[1], 10),\n                parseInt(split[2], 10),\n                0,\n            );\n        }\n    }\n    if (typeof date != 'object') {\n        throw new TypeError(`date must be Date or string, not ${typeof date}`);\n    }\n\n    let m = 'am';\n    let displayHour = '';\n    let displayMinute = '';\n    const hr = date.getHours();\n    const min = date.getMinutes();\n\n    if (hr === 0) {\n        displayHour = '12';\n    } else if (hr === 12) {\n        displayHour = '12';\n        m = 'pm';\n    } else if (hr > 12) {\n        const mathHr = hr - 12;\n        displayHour = mathHr.toString();\n        m = 'pm';\n    } else {\n        displayHour = hr.toString();\n    }\n\n    if (min === 0) {\n        displayMinute = '';\n    } else if (min < 10) {\n        displayMinute = ':0' + min.toString();\n    } else {\n        displayMinute = ':' + min.toString();\n    }\n\n    return displayHour + displayMinute + m;\n}\n\n/**\n * Returns a date object based on the string given\n * @param  {string} string in format 13:00:00, from gtfs data\n * @return {Date}\n */\nexport function gtfsArrivalToDate(string: string): Date {\n    const [hour, min, second] = string.split(':').map(s => parseInt(s, 10));\n    let extraDays = 0;\n    let extraHours = 0;\n    if (hour > 23) {\n        extraDays = Math.floor(hour / 24);\n        extraHours = hour % 24;\n    }\n    return new Date(0, 0, 0 + extraDays, hour + extraHours, min, second, 0);\n}\n\n/**\n * Combines stringTime() and gtfsArrivalToDate()\n * @param  {string} string in format 13:00:00, from gtfs data\n * @return {string}        String representation of time\n */\nexport function gtfsArrivalToString(string: string) {\n    return stringTime(gtfsArrivalToDate(string));\n}\n\n/**\n * Returns a URL variable, or null if it does not exist\n * @param  {string} variable - The name of the query variable to find\n * @return {string}\n */\nexport function getQueryVariable(variable: string): string | null {\n    let query = '';\n    let vars: string[];\n    if (window.location.hash.indexOf('#!') > -1) {\n        query = window.location.hash.substring(\n            window.location.hash.indexOf('#!') + 2,\n        );\n        vars = query.split('&');\n    } else if (window.location.search.indexOf('_escaped_fragment_') > -1) {\n        query = window.location.search.substring(\n            window.location.search.indexOf('_escaped_fragment_') + 19,\n        );\n        vars = query.split('%26');\n    }\n\n    if (query !== '') {\n        for (const parts of vars!) {\n            const [key, value] = parts.split('=');\n            if (key === variable) return value;\n        }\n    }\n    return null;\n}\n\n/**\n * Returns the current time, with date stripped out\n * @return {Date} Current time in hour, min, seconds; other params set to 0\n */\nexport function nowDateTime(): Date {\n    const now = new Date();\n    return new Date(\n        0,\n        0,\n        0,\n        now.getHours(),\n        now.getMinutes(),\n        now.getSeconds(),\n        0,\n    );\n}\n\n/**\n * Sorts stop time keys\n * @param  {GTFSData stop_times} stopTimes\n * @return {string[]} ordered list\n */\nexport function sequence(stopTimes: Trip['stop_times']) {\n    const stopSequence = [];\n    for (const key in stopTimes) {\n        stopSequence.push(key);\n    }\n    return stopSequence.sort((a, b) => parseInt(a, 10) - parseInt(b, 10));\n}\n","/**\n * Contains code to build UI. Interacts with DOM.\n * @author       Tiger Oakes <tigeroakes@gmail.com>\n * @copyright    2014 Tiger Oakes\n */\n\nimport { GTFSData, Route, Stop, Trip } from './gtfs-types.js';\nimport {\n    Active,\n    ActiveState,\n    clickEvent,\n    documentLoad,\n    dynamicLinkNode,\n    getQueryVariable,\n    getScheduleData,\n    gtfsArrivalToDate,\n    gtfsArrivalToString,\n    Linkable,\n    locateUser,\n    LocationUpdate,\n    normal,\n    nowDateTime,\n    openCallbacks,\n    placeShape,\n    sequence,\n    setActiveState,\n    stopShape,\n    stringTime,\n    Type,\n    unimportant,\n    updateEvent,\n    userShape,\n    View,\n} from './load.js';\n\nlet map: google.maps.Map | undefined;\nlet streetview: google.maps.StreetViewPanorama | undefined;\nlet autocomplete: google.maps.places.Autocomplete | undefined;\nlet boundsAllStops: google.maps.LatLngBounds | undefined;\nlet markers: StopMarker[] = [];\nlet userMapMarker: LinkableMarker | undefined;\nlet stopMarker: google.maps.Marker | undefined;\n\nconst documentPromise = documentLoad();\nconst schedulePromise = getScheduleData();\nconst locatePromise = locateUser(schedulePromise);\nlet placeMapMarker: LinkableMarker | undefined;\nconst mapLoaded = loadMap();\nif (mapLoaded === false) {\n    locatePromise.then(function(position) {\n        if (!Active.STOP) openStop(position.stop);\n    });\n}\n\ntype LinkableMarker = google.maps.Marker & Linkable;\ninterface StopMarker extends LinkableMarker {\n    stop_id: string;\n    activeInRoute?: boolean;\n}\n\nfunction stopToPos(stop: Stop) {\n    return new google.maps.LatLng(\n        parseFloat(stop.stop_lat),\n        parseFloat(stop.stop_lon),\n    );\n}\n\nfunction loadMap() {\n    if (\n        !navigator.onLine ||\n        typeof google !== 'object' ||\n        typeof google.maps !== 'object'\n    ) {\n        console.error('Google Maps API has not loaded');\n        documentPromise.then(function() {\n            document.body.classList.add('no-map');\n        });\n        return false;\n    }\n    boundsAllStops = new google.maps.LatLngBounds();\n    markers = [];\n\n    function markersAndLatLng(schedule: GTFSData) {\n        return Promise.resolve().then(() => {\n            for (const stop of Object.values(schedule.stops)) {\n                const marker = new google.maps.Marker({\n                    position: stopToPos(stop),\n                    title: stop.stop_name,\n                    icon: normal,\n                }) as StopMarker;\n                marker.Type = Type.STOP;\n                marker.Value = stop.stop_id;\n                marker.stop_id = stop.stop_id;\n                google.maps.event.addListener(marker, 'click', clickEvent);\n                boundsAllStops!.extend(marker.getPosition()!);\n                markers.push(marker);\n            }\n            return {\n                markers: markers,\n                bounds: boundsAllStops!,\n            };\n        });\n    }\n\n    function mapLoad() {\n        return Promise.resolve().then(() => {\n            const mapElement =\n                Active.View.STOP === View.MAP_PRIMARY\n                    ? document.getElementById('map-canvas')!\n                    : document.getElementById('streetview-canvas')!;\n            const panoElement =\n                Active.View.STOP === View.STREET_PRIMARY\n                    ? document.getElementById('map-canvas')!\n                    : document.getElementById('streetview-canvas')!;\n\n            map = new google.maps.Map(mapElement, {\n                center: new google.maps.LatLng(19.6, -155.56),\n                zoom: 10,\n                mapTypeControlOptions: {\n                    position: google.maps.ControlPosition.TOP_CENTER,\n                },\n                panControlOptions: {\n                    position: google.maps.ControlPosition.RIGHT_TOP,\n                },\n                streetViewControlOptions: {\n                    position: google.maps.ControlPosition.RIGHT_TOP,\n                },\n                zoomControlOptions: {\n                    position: google.maps.ControlPosition.RIGHT_TOP,\n                },\n            });\n\n            streetview = new google.maps.StreetViewPanorama(panoElement, {\n                position: new google.maps.LatLng(19.723835, -155.084741),\n                visible: true,\n                pov: { heading: 34, pitch: 0 },\n                scrollwheel: false,\n                panControlOptions: {\n                    position: google.maps.ControlPosition.RIGHT_CENTER,\n                },\n                zoomControlOptions: {\n                    style: google.maps.ZoomControlStyle.SMALL,\n                    position: google.maps.ControlPosition.RIGHT_CENTER,\n                },\n                addressControl: false,\n            });\n            map.setStreetView(streetview!);\n\n            autocomplete = new google.maps.places.Autocomplete(\n                document.getElementById('search') as HTMLInputElement,\n            );\n            autocomplete.bindTo('bounds', map);\n            google.maps.event.addListener(\n                autocomplete,\n                'place_changed',\n                function() {\n                    const place = autocomplete!.getPlace();\n                    if (!place.geometry) return;\n                    const loc = place.geometry.location;\n                    console.log('Lat %s, Lon %s', loc.lat(), loc.lng());\n                    locateUser(schedulePromise, {\n                        latitude: loc.lat(),\n                        longitude: loc.lng(),\n                    }).then(position => {\n                        if (!placeMapMarker) {\n                            placeMapMarker = new google.maps.Marker({\n                                position: new google.maps.LatLng(\n                                    position.location.latitude,\n                                    position.location.longitude,\n                                ),\n                                title: 'Search Location',\n                                icon: placeShape,\n                                map: map,\n                                animation: google.maps.Animation.DROP,\n                                zIndex: 1000,\n                            }) as LinkableMarker;\n                            placeMapMarker.Type = Type.STOP;\n                            google.maps.event.addListener(\n                                placeMapMarker,\n                                'click',\n                                clickEvent,\n                            );\n                        }\n                        placeMapMarker.Value = position.stop;\n                        openStop(position.stop);\n                    });\n                },\n            );\n            return map;\n        });\n    }\n\n    Promise.all([\n        documentPromise.then(mapLoad),\n        schedulePromise.then(markersAndLatLng),\n    ]).then(function([map, { markers, bounds }]) {\n        map.setCenter(bounds.getCenter());\n        map.fitBounds(bounds);\n        google.maps.event.addListener(map, 'bounds_changed', function() {\n            const mapBounds = map.getBounds()!;\n            for (const marker of markers) {\n                if (mapBounds.contains(marker.getPosition()!)) {\n                    if (marker.getMap() !== map) marker.setMap(map);\n                } else {\n                    marker.setMap(null);\n                }\n            }\n        });\n        markers.forEach(marker => marker.setMap(map));\n        locatePromise.then(function(position) {\n            userMapMarker = new google.maps.Marker({\n                position: new google.maps.LatLng(\n                    position.location.latitude,\n                    position.location.longitude,\n                ),\n                title: position.custom ? 'Location of Place' : 'My Location',\n                icon: position.custom ? placeShape : userShape,\n                map: map,\n                animation: google.maps.Animation.DROP,\n                zIndex: 1000,\n            }) as LinkableMarker;\n            userMapMarker.Type = Type.STOP;\n            userMapMarker.Value = position.stop;\n            google.maps.event.addListener(userMapMarker, 'click', clickEvent);\n            if (!Active.STOP) openStop(position.stop);\n            window.addEventListener('locationupdate', (evt: Event) => {\n                const { custom, location } = (evt as CustomEvent<\n                    LocationUpdate\n                >).detail;\n                userMapMarker!.setIcon(custom ? placeShape : userShape);\n                userMapMarker!.setPosition(\n                    new google.maps.LatLng(\n                        location.latitude,\n                        location.longitude,\n                    ),\n                );\n            });\n        });\n    });\n\n    window.addEventListener('resize', function() {\n        google.maps.event.trigger(map, 'resize');\n        google.maps.event.trigger(streetview, 'resize');\n        if (!Active.Route.ID) {\n            map!.setCenter(boundsAllStops!.getCenter());\n            map!.fitBounds(boundsAllStops!);\n        }\n    });\n}\n\nschedulePromise.then(updateAside);\nfunction updateAside(schedule: GTFSData) {\n    interface Aside extends HTMLElement {\n        routeListItems: RouteListItem[];\n    }\n\n    interface RouteListItem extends HTMLLIElement {\n        route_id: string;\n    }\n\n    let aside: Aside | null = null;\n    const routeListItems: RouteListItem[] = [];\n    function generateListItems() {\n        for (const route of Object.values(schedule.routes)) {\n            const listItem = document.createElement('li') as RouteListItem;\n            listItem.style.borderColor = `#${route.route_color}`;\n            listItem.route_id = route.route_id;\n            const link = dynamicLinkNode(Type.ROUTE, route.route_id, true);\n            link.textContent = route.route_long_name;\n            listItem.append(link);\n            routeListItems.push(listItem);\n        }\n    }\n\n    documentPromise.then(function() {\n        if (aside !== null && typeof aside != 'undefined') {\n            insertListItems(aside);\n        } else {\n            generateListItems();\n            aside = document.getElementById('aside') as Aside;\n            aside.routeListItems = routeListItems;\n            insertListItems(aside);\n        }\n    });\n\n    function insertListItems(aside: Aside) {\n        const nearbyList = document.getElementById('nearby')!;\n        const otherList = document.getElementById('other')!;\n        otherList.append(...aside.routeListItems);\n        locatePromise.then(function(result) {\n            for (const item of aside.routeListItems) {\n                if (\n                    schedule.stops[result.stop].routes.includes(item.route_id)\n                ) {\n                    nearbyList.appendChild(item);\n                } else {\n                    otherList.appendChild(item);\n                }\n            }\n        });\n    }\n}\n\ndocumentPromise.then(function() {\n    uiEvents();\n});\n\nfunction openActive(state: ActiveState) {\n    console.log(state);\n    return Promise.all([\n        openRoute(state.Route.ID!).then(bestTrip =>\n            openTrip(state.Route.TRIP ? state.Route.TRIP : bestTrip!),\n        ),\n        openStop(state.STOP!),\n    ]).then(() => {});\n}\n\nPromise.all([documentPromise, schedulePromise]).then(function() {\n    if (!window.history.state && window.location.search.indexOf('#!') > -1) {\n        Active.Route.ID = getQueryVariable('route')\n            ? getQueryVariable('route')\n            : Active.Route.ID;\n        Active.Route.TRIP = getQueryVariable('trip')\n            ? getQueryVariable('trip')\n            : Active.Route.TRIP;\n        Active.STOP = getQueryVariable('stop')\n            ? getQueryVariable('stop')\n            : Active.STOP;\n\n        openActive(Active);\n    } else if (window.history.state) {\n        setActiveState(window.history.state);\n        openActive(Active);\n    }\n});\n\nwindow.onhashchange = function() {\n    Active.Route.ID = getQueryVariable('route')\n        ? getQueryVariable('route')\n        : Active.Route.ID;\n    Active.Route.TRIP = getQueryVariable('trip')\n        ? getQueryVariable('trip')\n        : Active.Route.TRIP;\n    Active.STOP = getQueryVariable('stop')\n        ? getQueryVariable('stop')\n        : Active.STOP;\n    openActive(Active);\n};\nwindow.onpopstate = function(e) {\n    setActiveState(e.state);\n    openActive(Active);\n};\n\n/**\n * Adds click events to buttons in the site.\n */\nfunction uiEvents() {\n    if (!navigator.onLine) {\n        document.getElementById('main')!.classList.add('offline');\n    }\n    document\n        .getElementById('map-toggle')!\n        .addEventListener('click', switchMapStreetview);\n    const select = document.getElementById('trip-select') as HTMLSelectElement &\n        Linkable;\n    select.Type = Type.TRIP;\n    select.addEventListener('change', function(e) {\n        select.Value = select.options[select.selectedIndex].value;\n        clickEvent.call(select, e);\n    });\n\n    function toggleSidebar() {\n        document.getElementById('aside')!.classList.toggle('open');\n    }\n    document\n        .getElementById('screen-cover')!\n        .addEventListener('click', toggleSidebar);\n    document.getElementById('menu')!.addEventListener('click', toggleSidebar);\n    document\n        .getElementById('alt-menu')!\n        .addEventListener('click', toggleSidebar);\n}\n\nfunction removeChildren(parent: HTMLElement) {\n    while (parent.firstChild) parent.removeChild(parent.firstChild);\n}\n\n/**\n * Swaps map and streetview divs\n * @return {[type]} [description]\n */\nfunction switchMapStreetview(this: HTMLElement) {\n    if (!map || !streetview) {\n        console.error('Map and StreetViewPanorama have not loaded');\n        throw new TypeError();\n    }\n\n    const mapParent = document.getElementById('map')!;\n    const panoParent = document.getElementById('streetview-header')!;\n\n    if (Active.View.STOP == View.MAP_PRIMARY) {\n        mapParent.insertBefore(\n            document.getElementById('streetview-canvas')!,\n            mapParent.firstChild,\n        );\n        panoParent.insertBefore(\n            document.getElementById('map-canvas')!,\n            mapParent.firstChild,\n        );\n        this.classList.add('on');\n        Active.View.STOP = View.STREET_PRIMARY;\n    } else if (Active.View.STOP == View.STREET_PRIMARY) {\n        mapParent.insertBefore(\n            document.getElementById('map-canvas')!,\n            mapParent.firstChild,\n        );\n        panoParent.insertBefore(\n            document.getElementById('streetview-canvas')!,\n            mapParent.firstChild,\n        );\n        this.classList.remove('on');\n        Active.View.STOP = View.MAP_PRIMARY;\n    }\n    dispatchEvent(updateEvent);\n}\n\nfunction switchTripView(this: HTMLElement) {\n    if (Active.View.ROUTE == View.LIST) {\n        Active.View.ROUTE = View.TIMETABLE;\n        this.classList.add('timetable');\n        this.title = 'View as list';\n    } else if (Active.View.ROUTE == View.TIMETABLE) {\n        Active.View.ROUTE = View.LIST;\n        this.classList.remove('timetable');\n        this.title = 'View as timetable';\n    }\n    openTrip(Active.Route.TRIP!);\n}\n\n/**\n * Creates a route UI and opens the section if the map is currently in fullscreen mode.\n * @param  {string} route_id ID of the route\n * @return {Promise<string>} trip_id that can be used in openTrip. Best matches time and open stop, if any.\n * @throws {string} If the ID does not exist\n */\nfunction openRoute(route_id: Route['route_id']) {\n    return schedulePromise.then(buses => {\n        const thisRoute = buses.routes[route_id];\n        if (!thisRoute || !thisRoute.route_id) {\n            console.error('Invalid Route %s', route_id);\n            //throw route_id;\n            return;\n        }\n\n        Active.Route.ID = route_id;\n        Active.Route.TRIP = null;\n\n        document.title = thisRoute.route_long_name;\n\n        const name = document.getElementById('route_long_name')!;\n        name.textContent = thisRoute.route_long_name;\n        name.style.backgroundColor = `#${thisRoute.route_color}`;\n        name.style.color = `#${thisRoute.route_text_color}`;\n        document.getElementById(\n            'alt-menu',\n        )!.style.fill = `#${thisRoute.route_text_color}`;\n\n        let firstStop: Stop['stop_id'] | undefined;\n        let lastStop: Stop['stop_id'] | undefined;\n        let largest = 0;\n        let earliest = new Date(0, 0, 0, 23, 59, 59, 0);\n        let latest = new Date(0, 0, 0, 0, 0, 0, 0);\n        let earliestTrip: Trip['trip_id'] | undefined;\n        let earliestTripStop: Stop['stop_id'] | undefined;\n\n        const nowTime = nowDateTime();\n        let closestTrip: Trip['trip_id'] | undefined;\n        let closestTripTime = Number.MAX_VALUE;\n        let closestTripStop: Stop['stop_id'] | undefined;\n        const select = document.getElementById('trip-select')!;\n        removeChildren(select);\n\n        const routeStops = new Set<Stop['stop_id']>();\n\n        for (const trip_id of Object.keys(thisRoute.trips)) {\n            const trip = thisRoute.trips[trip_id];\n            for (const stop in trip.stop_times) {\n                if (stop == '1' && parseInt(trip.direction_id, 10) === 0) {\n                    firstStop = trip.stop_times[stop].stop_id;\n                } else {\n                    if (\n                        parseInt(stop, 10) > largest &&\n                        parseInt(trip.direction_id, 10) === 0\n                    ) {\n                        largest = parseInt(stop, 10);\n                        lastStop = trip.stop_times[stop].stop_id;\n                    }\n                }\n\n                routeStops.add(trip.stop_times[stop].stop_id);\n\n                const timeDate = gtfsArrivalToDate(\n                    trip.stop_times[stop].arrival_time,\n                );\n                if (timeDate > latest) {\n                    latest = timeDate;\n                }\n                if (timeDate < earliest) {\n                    earliest = timeDate;\n                    earliestTrip = trip.trip_id;\n                    earliestTripStop = trip.stop_times[stop].stop_id;\n                }\n\n                if (\n                    timeDate.getTime() - nowTime.getTime() < closestTripTime &&\n                    timeDate.getTime() - nowTime.getTime() > 0\n                ) {\n                    closestTripTime = timeDate.getTime() - nowTime.getTime();\n                    closestTrip = trip.trip_id;\n                    closestTripStop = trip.stop_times[stop].stop_id;\n                }\n            }\n            if (!closestTrip) {\n                //Too late for all bus routes\n                closestTripTime =\n                    new Date(\n                        0,\n                        0,\n                        1,\n                        earliest.getHours(),\n                        earliest.getMinutes(),\n                        earliest.getSeconds(),\n                        0,\n                    ).getTime() - nowTime.getTime();\n                closestTrip = earliestTrip;\n                closestTripStop = earliestTripStop;\n            }\n            const option = document.createElement('option');\n            option.value = trip.trip_id;\n            option.textContent = trip.trip_short_name;\n            select.appendChild(option);\n        }\n\n        const minString =\n            Math.floor(closestTripTime / 60000) != 1\n                ? Math.floor(closestTripTime / 60000) + ' minutes'\n                : '1 minute';\n        document.getElementById('place-value')!.textContent =\n            'Between ' +\n            buses!.stops[firstStop!].stop_name +\n            ' - ' +\n            buses!.stops[lastStop!].stop_name;\n        document.getElementById('time-value')!.textContent =\n            stringTime(earliest) + ' - ' + stringTime(latest);\n        document.getElementById('next-stop-value')!.textContent =\n            'Reaches ' +\n            buses!.stops[closestTripStop!].stop_name +\n            ' in ' +\n            minString;\n\n        document.getElementById('main')!.classList.add('open');\n\n        if (\n            navigator.onLine &&\n            typeof google === 'object' &&\n            typeof google.maps === 'object'\n        ) {\n            const routeBounds = new google.maps.LatLngBounds();\n            for (const marker of markers) {\n                if (routeStops.has(marker.stop_id)) {\n                    marker.setIcon(normal);\n                    marker.setZIndex(200);\n                    marker.activeInRoute = true;\n                    routeBounds.extend(marker.getPosition()!);\n                } else {\n                    marker.setIcon(unimportant);\n                    marker.setZIndex(null);\n                    marker.activeInRoute = false;\n                }\n            }\n            if (stopMarker) {\n                stopMarker.setIcon(stopShape);\n                stopMarker.setZIndex(300);\n            }\n\n            google.maps.event.trigger(map, 'resize');\n            map!.setCenter(routeBounds.getCenter());\n            map!.fitBounds(routeBounds);\n            google.maps.event.trigger(streetview, 'resize');\n        }\n\n        window.dispatchEvent(updateEvent);\n        openTrip(closestTrip!);\n        return closestTrip;\n    });\n}\n\n/**\n * Creates a Stop fragment in the #stop element\n * @param  {[type]} stop_id Id of the stop to use\n * @return {void}           Creates an element\n */\nfunction openStop(stop_id: Stop['stop_id']) {\n    return schedulePromise.then(buses => {\n        const thisStop = buses.stops[stop_id];\n        if (!thisStop || !thisStop.stop_id) {\n            console.error('Invalid Stop %s', stop_id);\n            //throw stop_id;\n            return;\n        }\n\n        Active.STOP = stop_id;\n\n        if (streetview) {\n            streetview.setPosition(stopToPos(thisStop));\n        }\n        if (map) {\n            for (const marker of markers) {\n                if (marker.activeInRoute || Active.Route.ID == null) {\n                    marker.setIcon(normal);\n                } else {\n                    marker.setIcon(unimportant);\n                }\n                if (marker.stop_id === thisStop.stop_id) {\n                    stopMarker = marker;\n                }\n            }\n\n            stopMarker!.setIcon(stopShape);\n            stopMarker!.setZIndex(300);\n\n            streetview!.setPosition(stopMarker!.getPosition()!);\n            google.maps.event.trigger(streetview, 'resize');\n            google.maps.event.addListener(\n                streetview!,\n                'pano_changed',\n                function() {\n                    document.getElementById(\n                        'address',\n                    )!.textContent = streetview!.getLocation().description!;\n                    streetview!.setPov(streetview!.getPhotographerPov());\n                },\n            );\n        }\n        if (!streetview) {\n            document.getElementById('stop')!.classList.add('no-streetview');\n        }\n\n        document.getElementById('stop_name')!.textContent = thisStop.stop_name;\n\n        const list = document.getElementById('connections')!;\n        removeChildren(list);\n        for (const route_id of thisStop.routes) {\n            const route = buses.routes[route_id];\n            const linkItem = dynamicLinkNode(Type.ROUTE, route_id, false);\n            linkItem.style.borderColor = `#${route.route_color}`;\n            linkItem.textContent = route.route_long_name;\n\n            const listItem = document.createElement('li');\n            listItem.append(linkItem);\n            if (Active.Route.ID === route_id) {\n                listItem.className = 'active-route';\n            }\n            list.append(listItem);\n        }\n\n        document.getElementById('main')!.classList.add('open-stop');\n        window.dispatchEvent(updateEvent);\n    });\n}\n\nfunction openTrip(trip_id: Trip['trip_id']) {\n    return schedulePromise.then(buses => {\n        const route = buses.routes[Active.Route.ID!];\n        const trip = route.trips[trip_id];\n        if (!trip || !trip.trip_id) {\n            console.error(\n                'Invalid trip %s in route %s',\n                trip_id,\n                Active.Route.ID,\n            );\n            //throw trip_id;\n            return;\n        }\n\n        Active.Route.TRIP = trip_id;\n\n        const schedule = document.getElementById('schedule')!;\n        removeChildren(schedule);\n\n        const stopSequence = sequence(trip.stop_times);\n\n        const select = document.getElementById(\n            'trip-select',\n        ) as HTMLSelectElement;\n        for (let option = 0; option < select.options.length; option++) {\n            if (select.options[option].value === trip_id) {\n                select.selectedIndex = option;\n                select.options[option].selected = true;\n                break;\n            }\n        }\n\n        document.getElementById('week-days-value')!.textContent =\n            buses.calendar[trip.service_id].text_name;\n\n        for (const sequence of stopSequence) {\n            const tripStop = trip.stop_times[sequence];\n            const routeListItem = dynamicLinkNode(Type.STOP, tripStop.stop_id);\n\n            const lines = document.createElement('div');\n            lines.className = 'lines';\n            for (let j = 0; j < 2; j++) {\n                const line = document.createElement('span');\n                line.className = 'line';\n                line.style.backgroundColor = `#${route.route_color}`;\n                lines.appendChild(line);\n            }\n            routeListItem.appendChild(lines);\n\n            const name = document.createElement('span');\n            name.className = 'name';\n            name.textContent = buses.stops[tripStop.stop_id].stop_name;\n            routeListItem.appendChild(name);\n\n            const time = document.createElement('time');\n            time.textContent = gtfsArrivalToString(tripStop.arrival_time);\n            routeListItem.appendChild(time);\n\n            const connection = document.createElement('div');\n            connection.className = 'connections';\n            for (const connectRoute of buses.stops[tripStop.stop_id].routes) {\n                if (connectRoute === Active.Route.ID) {\n                    continue;\n                }\n\n                const item = document.createElement('span');\n                item.className = 'route-dash';\n                item.title = buses.routes[connectRoute].route_long_name;\n                item.style.backgroundColor =\n                    buses.routes[connectRoute].route_color;\n\n                connection.appendChild(item);\n            }\n            routeListItem.appendChild(connection);\n            schedule.appendChild(routeListItem);\n        }\n\n        window.dispatchEvent(updateEvent);\n    });\n}\n\nopenCallbacks[Type.ROUTE] = openRoute;\nopenCallbacks[Type.STOP] = openStop;\nopenCallbacks[Type.TRIP] = openTrip;\n"],"names":["Type","View","Active","Route","ID","TRIP","STOP","ROUTE","LIST","MAP_PRIMARY","updateEvent","CustomEvent","navigator","serviceWorker","register","openCallbacks","normal","url","size","height","width","scaledSize","origin","x","y","anchor","unimportant","userShape","placeShape","stopShape","setActiveState","newState","locateUser","busPromise","customLocation","locatePromise","Promise","resolve","coords","customLocationFlag","reject","geolocation","getCurrentPosition","closestStop","closestDistance","Number","MAX_VALUE","all","then","e","schedule","userPos","stop_id","Object","keys","stops","stop","distance","Math","sqrt","pow","latitude","parseFloat","stop_lat","longitude","stop_lon","location","custom","Error","JSON","stringify","pageLink","type","value","link","console","warn","dynamicLinkNode","update","node","document","createElement","Value","href","addEventListener","clickEvent","preventDefault","stopPropagation","state","val","this","newLink","callback","history","pushState","ga","page","title","stringTime","date","indexOf","lastIndexOf","split","Date","parseInt","TypeError","m","displayHour","displayMinute","hr","getHours","min","getMinutes","toString","gtfsArrivalToDate","string","hour","second","map","s","extraDays","extraHours","floor","gtfsArrivalToString","getQueryVariable","variable","vars","query","window","hash","substring","search","parts","key","streetview","autocomplete","boundsAllStops","userMapMarker","stopMarker","markers","documentPromise","readyState","schedulePromise","responseType","rq","XMLHttpRequest","open","onload","status","response","statusText","onerror","send","json","placeMapMarker","stopToPos","google","maps","LatLng","openActive","log","openRoute","bestTrip","openTrip","openStop","removeChildren","parent","firstChild","removeChild","switchMapStreetview","error","mapParent","getElementById","panoParent","insertBefore","classList","add","STREET_PRIMARY","remove","dispatchEvent","route_id","buses","thisRoute","routes","route_long_name","name","firstStop","lastStop","textContent","style","backgroundColor","route_color","color","route_text_color","fill","earliestTrip","earliestTripStop","largest","earliest","latest","nowTime","now","getSeconds","nowDateTime","closestTrip","closestTripStop","closestTripTime","select","routeStops","Set","trip_id","trips","trip","stop_times","direction_id","timeDate","arrival_time","getTime","option","trip_short_name","appendChild","minString","stop_name","onLine","routeBounds","LatLngBounds","marker","has","setIcon","setZIndex","activeInRoute","extend","getPosition","event","trigger","setCenter","getCenter","fitBounds","thisStop","setPosition","addListener","getLocation","description","setPov","getPhotographerPov","list","route","linkItem","borderColor","listItem","append","className","stopSequence","stopTimes","push","sort","a","b","sequence","options","length","selectedIndex","selected","calendar","service_id","text_name","tripStop","routeListItem","lines","j","line","time","connection","connectRoute","item","body","mapElement","panoElement","Map","center","zoom","mapTypeControlOptions","position","ControlPosition","TOP_CENTER","panControlOptions","RIGHT_TOP","streetViewControlOptions","zoomControlOptions","StreetViewPanorama","visible","pov","heading","pitch","scrollwheel","RIGHT_CENTER","ZoomControlStyle","SMALL","addressControl","setStreetView","places","Autocomplete","bindTo","place","getPlace","geometry","loc","lat","lng","Marker","icon","animation","Animation","DROP","zIndex","values","bounds","mapBounds","getBounds","contains","getMap","setMap","forEach","evt","detail","loadMap","aside","routeListItems","insertListItems","nearbyList","otherList","result","includes","generateListItems","toggleSidebar","toggle","call","uiEvents","onhashchange","onpopstate"],"mappings":"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"}